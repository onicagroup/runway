"""This type stub file was generated by pyright."""

from __future__ import annotations

from concurrent import futures
from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    ClassVar,
    Dict,
    List,
    NamedTuple,
    Optional,
    Set,
    Type,
    Union,
)

from typing_extensions import Literal

if TYPE_CHECKING:
    from logging import Logger
    from traceback import TracebackException

    from .tasks import Task
    from .utils import CallArgs

logger: Logger = ...

class TaskTag(NamedTuple):
    name: str

class BaseTransferFuture:
    @property
    def meta(self) -> BaseTransferMeta: ...
    def done(self) -> bool: ...
    def result(self) -> Any: ...
    def cancel(self) -> None: ...

class BaseTransferMeta:
    @property
    def call_args(self) -> CallArgs: ...
    @property
    def transfer_id(self) -> Optional[str]: ...
    @property
    def user_context(self) -> Dict[Any, Any]: ...

class TransferFuture(BaseTransferFuture):
    def __init__(
        self,
        meta: Optional[TransferMeta] = ...,
        coordinator: Optional[TransferCoordinator] = ...,
    ) -> None: ...
    @property
    def meta(self) -> TransferMeta: ...
    def done(self) -> bool: ...
    def result(self) -> Any: ...
    def cancel(self) -> None: ...
    def set_exception(self, exception: Exception) -> None: ...

class TransferMeta(BaseTransferMeta):
    """Holds metadata about the TransferFuture"""

    def __init__(
        self, call_args: Optional[CallArgs] = ..., transfer_id: Optional[str] = ...
    ) -> None: ...
    @property
    def call_args(self) -> CallArgs: ...
    @property
    def transfer_id(self) -> Optional[str]: ...
    @property
    def size(self) -> Optional[int]: ...
    @property
    def user_context(self) -> Dict[Any, Any]: ...
    def provide_transfer_size(self, size: int) -> None: ...

class TransferCoordinator:
    """A helper class for managing TransferFuture"""

    def __init__(self, transfer_id: Optional[str] = ...) -> None: ...
    def __repr__(self) -> str: ...
    @property
    def exception(self) -> Optional[Exception]: ...
    @property
    def associated_futures(self) -> Set[futures.Future[Any]]: ...
    @property
    def failure_cleanups(self) -> List[Callable[..., Any]]: ...
    @property
    def status(
        self,
    ) -> Literal["not-started", "queued", "running", "cancelled", "failed", "success"]: ...
    def set_result(self, result: Any) -> None: ...
    def set_exception(self, exception: Exception, override: bool = ...) -> None: ...
    def result(self) -> Any: ...
    def cancel(self, msg: str = ..., exc_type: Exception = ...) -> None: ...
    def set_status_to_queued(self) -> None: ...
    def set_status_to_running(self) -> None: ...
    def submit(
        self, executor: BoundedExecutor, task: Task, tag: Optional[TaskTag] = ...
    ) -> futures.Future: ...
    def done(self) -> bool: ...
    def add_associated_future(self, future: futures.Future[Any]) -> None: ...
    def remove_associated_future(self, future: futures.Future[Any]) -> None: ...
    def add_done_callback(
        self, function: Callable[..., Any], *args: Any, **kwargs: Any
    ) -> None: ...
    def add_failure_cleanup(
        self, function: Callable[..., Any], *args: Any, **kwargs: Any
    ) -> None: ...
    def announce_done(self) -> None: ...

class BoundedExecutor:
    EXECUTOR_CLS: ClassVar[futures.ThreadPoolExecutor] = ...
    def __init__(
        self,
        max_size: int,
        max_num_threads: int,
        tag_semaphores: Dict[str, Any] = ...,
        executor_cls: Type[Union[BaseExecutor, futures.ThreadPoolExecutor]] = ...,
    ) -> None: ...
    def submit(
        self, task: Task, tag: Optional[TaskTag] = ..., block: bool = ...
    ) -> ExecutorFuture: ...
    def shutdown(self, wait: bool = ...) -> None: ...

class ExecutorFuture:
    def __init__(self, future: futures.Future[Any]) -> None: ...
    def result(self) -> Any: ...
    def add_done_callback(self, fn: Callable[..., Any]) -> None: ...
    def done(self) -> bool: ...

class BaseExecutor:
    def __init__(self, max_workers: Optional[int] = ...) -> None: ...
    def submit(
        self, fn: Callable[..., Any], *args: Any, **kwargs: Any
    ) -> NonThreadedExecutorFuture: ...
    def shutdown(self, wait: bool = ...) -> None: ...

class NonThreadedExecutor(BaseExecutor):
    def submit(
        self, fn: Callable[..., Any], *args: Any, **kwargs: Any
    ) -> NonThreadedExecutorFuture: ...
    def shutdown(self, wait: bool = ...) -> None: ...

class NonThreadedExecutorFuture:
    def __init__(self) -> None: ...
    def set_result(self, result: Any) -> None: ...
    def set_exception_info(self, exception: Exception, traceback: TracebackException) -> None: ...
    def result(self, timeout: Optional[int] = ...) -> Any: ...
    def done(self) -> bool: ...
    def add_done_callback(self, fn: Callable[..., Any]) -> None: ...

IN_MEMORY_UPLOAD_TAG: TaskTag = ...
IN_MEMORY_DOWNLOAD_TAG: TaskTag = ...
