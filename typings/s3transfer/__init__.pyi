"""This type stub file was generated by pyright."""

from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    import logging

__author__ = ...
__version__ = ...

class NullHandler(logging.Handler):
    def emit(self, record): ...

logger = ...
queue = ...
MB = ...
SHUTDOWN_SENTINEL = ...

def random_file_extension(num_digits=...): ...
def disable_upload_callbacks(request, operation_name, **kwargs): ...
def enable_upload_callbacks(request, operation_name, **kwargs): ...

class QueueShutdownError(Exception): ...

class ReadFileChunk:
    def __init__(
        self,
        fileobj,
        start_byte,
        chunk_size,
        full_file_size,
        callback=...,
        enable_callback=...,
    ) -> None: ...
    @classmethod
    def from_filename(
        cls, filename, start_byte, chunk_size, callback=..., enable_callback=...
    ): ...
    def read(self, amount=...): ...
    def enable_callback(self): ...
    def disable_callback(self): ...
    def seek(self, where): ...
    def close(self): ...
    def tell(self): ...
    def __len__(self): ...
    def __enter__(self): ...
    def __exit__(self, *args, **kwargs): ...
    def __iter__(self): ...

class StreamReaderProgress:
    def __init__(self, stream, callback=...) -> None: ...
    def read(self, *args, **kwargs): ...

class OSUtils:
    def get_file_size(self, filename): ...
    def open_file_chunk_reader(self, filename, start_byte, size, callback): ...
    def open(self, filename, mode): ...
    def remove_file(self, filename): ...
    def rename_file(self, current_filename, new_filename): ...

class MultipartUploader:
    UPLOAD_PART_ARGS = ...
    def __init__(self, client, config, osutil, executor_cls=...) -> None: ...
    def upload_file(self, filename, bucket, key, callback, extra_args): ...

class ShutdownQueue(queue.Queue):
    def trigger_shutdown(self): ...
    def put(self, item): ...

class MultipartDownloader:
    def __init__(self, client, config, osutil, executor_cls=...) -> None: ...
    def download_file(
        self, bucket, key, filename, object_size, extra_args, callback=...
    ): ...

class TransferConfig:
    def __init__(
        self,
        multipart_threshold=...,
        max_concurrency=...,
        multipart_chunksize=...,
        num_download_attempts=...,
        max_io_queue=...,
    ) -> None: ...

class S3Transfer:
    ALLOWED_DOWNLOAD_ARGS = ...
    ALLOWED_UPLOAD_ARGS = ...
    def __init__(self, client, config=..., osutil=...) -> None: ...
    def upload_file(self, filename, bucket, key, callback=..., extra_args=...): ...
    def download_file(self, bucket, key, filename, extra_args=..., callback=...): ...
