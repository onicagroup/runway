"""This type stub file was generated by pyright."""

from .tasks import SubmissionTask, Task

class AggregatedProgressCallback:
    def __init__(self, callbacks, threshold=...) -> None: ...
    def __call__(self, bytes_transferred): ...
    def flush(self): ...

class InterruptReader:
    def __init__(self, fileobj, transfer_coordinator) -> None: ...
    def read(self, amount=...): ...
    def seek(self, where): ...
    def tell(self): ...
    def close(self): ...
    def __enter__(self): ...
    def __exit__(self, *args, **kwargs): ...

class UploadInputManager:
    def __init__(self, osutil, transfer_coordinator, bandwidth_limiter=...) -> None: ...
    @classmethod
    def is_compatible(cls, upload_source): ...
    def stores_body_in_memory(self, operation_name): ...
    def provide_transfer_size(self, transfer_future): ...
    def requires_multipart_upload(self, transfer_future, config): ...
    def get_put_object_body(self, transfer_future): ...
    def yield_upload_part_bodies(self, transfer_future, chunksize): ...

class UploadFilenameInputManager(UploadInputManager):
    @classmethod
    def is_compatible(cls, upload_source): ...
    def stores_body_in_memory(self, operation_name): ...
    def provide_transfer_size(self, transfer_future): ...
    def requires_multipart_upload(self, transfer_future, config): ...
    def get_put_object_body(self, transfer_future): ...
    def yield_upload_part_bodies(self, transfer_future, chunksize): ...

class UploadSeekableInputManager(UploadFilenameInputManager):
    @classmethod
    def is_compatible(cls, upload_source): ...
    def stores_body_in_memory(self, operation_name): ...
    def provide_transfer_size(self, transfer_future): ...

class UploadNonSeekableInputManager(UploadInputManager):
    def __init__(self, osutil, transfer_coordinator, bandwidth_limiter=...) -> None: ...
    @classmethod
    def is_compatible(cls, upload_source): ...
    def stores_body_in_memory(self, operation_name): ...
    def provide_transfer_size(self, transfer_future): ...
    def requires_multipart_upload(self, transfer_future, config): ...
    def get_put_object_body(self, transfer_future): ...
    def yield_upload_part_bodies(self, transfer_future, chunksize): ...

class UploadSubmissionTask(SubmissionTask):
    UPLOAD_PART_ARGS = ...
    COMPLETE_MULTIPART_ARGS = ...

class PutObjectTask(Task): ...
class UploadPartTask(Task): ...
