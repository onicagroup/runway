"""
This type stub file was generated by pyright.
"""

from . import AWSHelperFn, AWSObject, AWSProperty

VALID_ELASTICINFERENCEACCELERATOR_TYPES = ("eia1.medium", "eia1.large", "eia1.xlarge")
VALID_CLIENTVPNENDPOINT_VPNPORT = (443, 1194)

def validate_elasticinferenceaccelerator_type(elasticinferenceaccelerator_type):
    """Validate ElasticInferenceAccelerator for Instance"""
    ...

def validate_clientvpnendpoint_vpnport(vpnport):
    """Validate VpnPort for ClientVpnEndpoint"""
    ...

class Tag(AWSProperty):
    props = ...
    def __init__(self, key=..., value=..., **kwargs) -> None: ...

class CarrierGateway(AWSObject):
    resource_type = ...
    props = ...

class CustomerGateway(AWSObject):
    resource_type = ...
    props = ...

class DHCPOptions(AWSObject):
    resource_type = ...
    props = ...

class EgressOnlyInternetGateway(AWSObject):
    resource_type = ...
    props = ...

class EIP(AWSObject):
    resource_type = ...
    props = ...

class EIPAssociation(AWSObject):
    resource_type = ...
    props = ...

class FlowLog(AWSObject):
    resource_type = ...
    props = ...

class NatGateway(AWSObject):
    resource_type = ...
    props = ...

class EBSBlockDevice(AWSProperty):
    props = ...

NO_DEVICE = {}

class BlockDeviceMapping(AWSProperty):
    props = ...

class LaunchTemplateBlockDeviceMapping(AWSProperty):
    props = ...

class MountPoint(AWSProperty):
    props = ...

class Placement(AWSProperty):
    props = ...

class CpuOptions(AWSProperty):
    props = ...

class CreditSpecification(AWSProperty):
    props = ...

class ElasticGpuSpecification(AWSProperty):
    props = ...

class Ipv6Addresses(AWSHelperFn):
    def __init__(self, address) -> None: ...

class LaunchTemplateSpecification(AWSProperty):
    props = ...

class PrivateIpAddressSpecification(AWSProperty):
    props = ...

class NetworkInterfaceProperty(AWSProperty):
    props = ...

class AssociationParameters(AWSProperty):
    props = ...

class SsmAssociations(AWSProperty):
    props = ...

class GatewayRouteTableAssociation(AWSObject):
    resource_type = ...
    props = ...

class Host(AWSObject):
    resource_type = ...
    props = ...

class ElasticInferenceAccelerator(AWSProperty):
    props = ...

class LicenseSpecification(AWSProperty):
    props = ...

class HibernationOptions(AWSProperty):
    props = ...

class Instance(AWSObject):
    resource_type = ...
    props = ...

class InternetGateway(AWSObject):
    resource_type = ...
    props = ...

class NetworkAcl(AWSObject):
    resource_type = ...
    props = ...

class ICMP(AWSProperty):
    props = ...

class PortRange(AWSProperty):
    props = ...

class NetworkAclEntry(AWSObject):
    resource_type = ...
    props = ...
    def validate(self): ...

class NetworkInterface(AWSObject):
    resource_type = ...
    props = ...

class NetworkInterfaceAttachment(AWSObject):
    resource_type = ...
    props = ...

PERMISSION_INSTANCE_ATTACH = "INSTANCE-ATTACH"
PERMISSION_EIP_ASSOCIATE = "EIP-ASSOCIATE"

class NetworkInterfacePermission(AWSObject):
    resource_type = ...
    props = ...

class Entry(AWSProperty):
    props = ...

class PrefixList(AWSObject):
    resource_type = ...
    props = ...

class Route(AWSObject):
    resource_type = ...
    props = ...
    def validate(self): ...

class RouteTable(AWSObject):
    resource_type = ...
    props = ...

def check_ports(props): ...

class SecurityGroupEgress(AWSObject):
    resource_type = ...
    props = ...
    def validate(self): ...

class SecurityGroupIngress(AWSObject):
    resource_type = ...
    props = ...
    def validate(self): ...

class SecurityGroupRule(AWSProperty):
    props = ...

class SecurityGroup(AWSObject):
    resource_type = ...
    props = ...

class Subnet(AWSObject):
    resource_type = ...
    props = ...
    def validate(self): ...

class SubnetNetworkAclAssociation(AWSObject):
    resource_type = ...
    props = ...

class SubnetRouteTableAssociation(AWSObject):
    resource_type = ...
    props = ...

class Volume(AWSObject):
    resource_type = ...
    props = ...

class VolumeAttachment(AWSObject):
    resource_type = ...
    props = ...

def instance_tenancy(value): ...

class VPC(AWSObject):
    resource_type = ...
    props = ...

class VPCDHCPOptionsAssociation(AWSObject):
    resource_type = ...
    props = ...

class VPCEndpoint(AWSObject):
    resource_type = ...
    props = ...

class VPCEndpointConnectionNotification(AWSObject):
    resource_type = ...
    props = ...

class VPCEndpointService(AWSObject):
    resource_type = ...
    props = ...

class VPCEndpointServicePermissions(AWSObject):
    resource_type = ...
    props = ...

class VPCGatewayAttachment(AWSObject):
    resource_type = ...
    props = ...

class VpnTunnelOptionsSpecification(AWSProperty):
    props = ...

class VPNConnection(AWSObject):
    resource_type = ...
    props = ...
    def validate(self): ...

class VPNConnectionRoute(AWSObject):
    resource_type = ...
    props = ...

class VPNGateway(AWSObject):
    resource_type = ...
    props = ...

class VPNGatewayRoutePropagation(AWSObject):
    resource_type = ...
    props = ...

class VPCPeeringConnection(AWSObject):
    resource_type = ...
    props = ...

class Monitoring(AWSProperty):
    props = ...

class NetworkInterfaces(AWSProperty):
    props = ...

class SecurityGroups(AWSProperty):
    props = ...

class IamInstanceProfile(AWSProperty):
    props = ...

class SpotFleetTagSpecification(AWSProperty):
    props = ...

class LaunchSpecifications(AWSProperty):
    props = ...

class LaunchTemplateOverrides(AWSProperty):
    props = ...

class LaunchTemplateConfigs(AWSProperty):
    props = ...

class ClassicLoadBalancer(AWSProperty):
    props = ...

class ClassicLoadBalancersConfig(AWSProperty):
    props = ...

class TargetGroup(AWSProperty):
    props = ...

class TargetGroupConfig(AWSProperty):
    props = ...

class LoadBalancersConfig(AWSProperty):
    props = ...

class SpotFleetRequestConfigData(AWSProperty):
    props = ...
    def validate(self): ...

class SpotFleet(AWSObject):
    resource_type = ...
    props = ...

class PlacementGroup(AWSObject):
    resource_type = ...
    props = ...

class SubnetCidrBlock(AWSObject):
    resource_type = ...
    props = ...

class VPCCidrBlock(AWSObject):
    resource_type = ...
    props = ...

class TagSpecifications(AWSProperty):
    props = ...

class SpotOptions(AWSProperty):
    props = ...

class InstanceMarketOptions(AWSProperty):
    props = ...

class LaunchTemplateCreditSpecification(AWSProperty):
    props = ...

class MetadataOptions(AWSProperty):
    props = ...

class LaunchTemplateElasticInferenceAccelerator(AWSProperty):
    props = ...

class LaunchTemplateData(AWSProperty):
    props = ...

class LaunchTemplate(AWSObject):
    resource_type = ...
    props = ...

class TrafficMirrorFilter(AWSObject):
    resource_type = ...
    props = ...

class TrafficMirrorPortRange(AWSProperty):
    props = ...

class TrafficMirrorFilterRule(AWSObject):
    resource_type = ...
    props = ...

class TrafficMirrorSession(AWSObject):
    resource_type = ...
    props = ...

class TrafficMirrorTarget(AWSObject):
    resource_type = ...
    props = ...

class TransitGateway(AWSObject):
    resource_type = ...
    props = ...

class TransitGatewayAttachment(AWSObject):
    resource_type = ...
    props = ...

class TransitGatewayRoute(AWSObject):
    resource_type = ...
    props = ...

class TransitGatewayRouteTable(AWSObject):
    resource_type = ...
    props = ...

class TransitGatewayRouteTableAssociation(AWSObject):
    resource_type = ...
    props = ...

class TransitGatewayRouteTablePropagation(AWSObject):
    resource_type = ...
    props = ...

class FleetLaunchTemplateSpecificationRequest(AWSProperty):
    props = ...

class FleetLaunchTemplateOverridesRequest(AWSProperty):
    props = ...

class FleetLaunchTemplateConfigRequest(AWSProperty):
    props = ...

class OnDemandOptionsRequest(AWSProperty):
    props = ...

class SpotOptionsRequest(AWSProperty):
    props = ...

class TargetCapacitySpecificationRequest(AWSProperty):
    props = ...

class EC2Fleet(AWSObject):
    resource_type = ...
    props = ...

class CapacityReservation(AWSObject):
    resource_type = ...
    props = ...

class ClientVpnAuthorizationRule(AWSObject):
    resource_type = ...
    props = ...

class CertificateAuthenticationRequest(AWSProperty):
    props = ...

class DirectoryServiceAuthenticationRequest(AWSProperty):
    props = ...

class FederatedAuthenticationRequest(AWSProperty):
    props = ...

class ClientAuthenticationRequest(AWSProperty):
    props = ...

class ConnectionLogOptions(AWSProperty):
    props = ...

class ClientVpnEndpoint(AWSObject):
    resource_type = ...
    props = ...

class ClientVpnRoute(AWSObject):
    resource_type = ...
    props = ...

class ClientVpnTargetNetworkAssociation(AWSObject):
    resource_type = ...
    props = ...

class LocalGatewayRoute(AWSObject):
    resource_type = ...
    props = ...

class LocalGatewayRouteTableVPCAssociation(AWSObject):
    resource_type = ...
    props = ...
