"""This type stub file was generated by pyright."""
from __future__ import annotations

import re
from typing import Any, Dict, List, Optional, Tuple, Type, TypeVar, Union

__version__ = "2.6.3"
Delete = "Delete"
Retain = "Retain"
Snapshot = "Snapshot"
AWS_ACCOUNT_ID = "AWS::AccountId"
AWS_NOTIFICATION_ARNS = "AWS::NotificationARNs"
AWS_NO_VALUE = "AWS::NoValue"
AWS_PARTITION = "AWS::Partition"
AWS_REGION = "AWS::Region"
AWS_STACK_ID = "AWS::StackId"
AWS_STACK_NAME = "AWS::StackName"
AWS_URL_SUFFIX = "AWS::URLSuffix"
MAX_MAPPINGS = 100
MAX_OUTPUTS = 60
MAX_PARAMETERS = 60
MAX_RESOURCES = 200
PARAMETER_TITLE_MAX = 255
valid_names = re.compile(r"^[a-zA-Z0-9]+$")

_T = TypeVar("_T")

def is_aws_object_subclass(cls: type) -> bool: ...
def encode_to_dict(obj: object) -> Union[Dict[Any, Any], List[Any]]: ...
def depends_on_helper(obj: object) -> Union[List[Union[List, object]], object, str]:
    """Handles using .title if the given object is a troposphere resource.

    If the given object is a troposphere resource, use the `.title` attribute
    of that resource. If it's a string, just use the string. This should allow
    more pythonic use of DependsOn.

    """
    ...

class BaseAWSObject(object):
    attributes: List[str]
    dictname: Optional[str]
    do_validation: bool
    properties: Dict[str, Any]
    propnames: List[str]
    resource: Dict[str, Any]
    template: Optional[Template]
    title: str
    def __init__(
        self,
        title: str,
        template: Template = ...,
        validation: bool = ...,
        **kwargs: Any
    ) -> None: ...
    def add_to_template(self) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def validate_title(self) -> None: ...
    def validate(self) -> None: ...
    def no_validation(self: _T) -> _T: ...
    def to_dict(self) -> Dict[str, Any]: ...
    @classmethod
    def from_dict(cls: Type[_T], title: Optional[str], d: Dict[str, Any]) -> _T: ...

class AWSObject(BaseAWSObject):
    dictname: str
    def ref(self) -> Ref: ...
    def get_att(self, value) -> GetAtt: ...

_AWSObject = TypeVar("_AWSObject", bound=AWSObject)

class AWSDeclaration(BaseAWSObject):
    """
    Used for CloudFormation Resource Property objects
    http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/
    aws-product-property-reference.html
    """

    def __init__(self, title, **kwargs) -> None: ...
    def ref(self): ...
    Ref = ...

class AWSProperty(BaseAWSObject):
    """
    Used for CloudFormation Resource Property objects
    http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/
    aws-product-property-reference.html
    """

    dictname = ...
    def __init__(self, title=..., **kwargs) -> None: ...

class AWSAttribute(BaseAWSObject):
    dictname = ...
    def __init__(self, title=..., **kwargs) -> None: ...

def validate_delimiter(delimiter): ...
def validate_pausetime(pausetime): ...

class UpdatePolicy(BaseAWSObject):
    def __init__(self, title, **kwargs) -> None: ...

class AWSHelperFn(object):
    data: Any
    def getdata(self, data): ...
    def to_dict(self): ...

class GenericHelperFn(AWSHelperFn):
    """ Used as a fallback for the template generator """

    def __init__(self, data) -> None: ...
    def to_dict(self): ...

class Base64(AWSHelperFn):
    def __init__(self, data) -> None: ...

class FindInMap(AWSHelperFn):
    def __init__(self, mapname, toplevelkey, secondlevelkey) -> None: ...

class GetAtt(AWSHelperFn):
    def __init__(self, logicalName, attrName) -> None: ...

class Cidr(AWSHelperFn):
    def __init__(self, ipblock, count, sizemask=...) -> None: ...

class GetAZs(AWSHelperFn):
    def __init__(self, region=...) -> None: ...

class If(AWSHelperFn):
    def __init__(self, cond, true, false) -> None: ...

class Equals(AWSHelperFn):
    def __init__(self, value_one, value_two) -> None: ...

class And(AWSHelperFn):
    def __init__(self, cond_one, cond_two, *conds) -> None: ...

class Or(AWSHelperFn):
    def __init__(self, cond_one, cond_two, *conds) -> None: ...

class Not(AWSHelperFn):
    def __init__(self, cond) -> None: ...

class Join(AWSHelperFn):
    def __init__(self, delimiter, values) -> None: ...

class Split(AWSHelperFn):
    def __init__(self, delimiter, values) -> None: ...

class Sub(AWSHelperFn):
    def __init__(self, input_str, dict_values=..., **values) -> None: ...

class Name(AWSHelperFn):
    def __init__(self, data) -> None: ...

class Select(AWSHelperFn):
    def __init__(self, indx, objects) -> None: ...

class Ref(AWSHelperFn):
    def __init__(self, data) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...

AccountId = Ref(AWS_ACCOUNT_ID)
NotificationARNs = Ref(AWS_NOTIFICATION_ARNS)
NoValue = Ref(AWS_NO_VALUE)
Partition = Ref(AWS_PARTITION)
Region = Ref(AWS_REGION)
StackId = Ref(AWS_STACK_ID)
StackName = Ref(AWS_STACK_NAME)
URLSuffix = Ref(AWS_URL_SUFFIX)

class Condition(AWSHelperFn):
    def __init__(self, data) -> None: ...

class ImportValue(AWSHelperFn):
    def __init__(self, data) -> None: ...

class Tag(AWSHelperFn):
    def __init__(self, k, v) -> None: ...

class Tags(AWSHelperFn):
    def __init__(self, *args, **kwargs) -> None: ...
    def __add__(self, newtags): ...
    def to_dict(self): ...
    @classmethod
    def from_dict(cls, title=..., **kwargs): ...

class Template(object):
    conditions: Dict[str, Condition]
    description: Optional[str]
    mappings: Dict[str, Dict[str, Any]]
    metadata: Optional[Dict[str, Any]]
    outputs: Dict[str, Output]
    parameters: Dict[str, Parameter]
    props: Dict[str, Tuple[type, bool]] = ...
    resources: Dict[str, AWSObject]
    rules: Dict[str, Any]
    transform: Optional[List[Any]]
    version: Optional[str]
    def __init__(
        self, Description: Optional[str] = ..., Metadata: Optional[Dict[str, Any]] = ...
    ) -> None: ...
    def set_description(self, description: str) -> None: ...
    def add_description(self, description: str) -> None: ...
    def set_metadata(self, metadata: Dict[str, Any]) -> None: ...
    def add_metadata(self, metadata: Dict[str, Any]) -> None: ...
    def add_condition(self, name: str, condition: AWSHelperFn) -> str: ...
    def handle_duplicate_key(self, key: str) -> None: ...
    def add_output(self, output: Output) -> Output: ...
    def add_mapping(self, name: str, mapping: Dict[str, Any]) -> None: ...
    def add_parameter(self, parameter: Parameter) -> Parameter: ...
    def get_or_add_parameter(self, parameter: Parameter) -> Parameter: ...
    def add_resource(self, resource: _T) -> _T: ...
    def add_rule(self, name: str, rule: Dict[str, Any]) -> None:
        """
        Add a Rule to the template to enforce extra constraints on the
        parameters. As of June 2019 rules are undocumented in CloudFormation
        but have the same syntax and behaviour as in ServiceCatalog:
        https://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html

        :param rule: a dict with 'Assertions' (mandatory) and 'RuleCondition'
                     (optional) keys
        """
        ...
    def set_version(self, version: Optional[str] = ...) -> None: ...
    def add_version(self, version: Optional[str] = ...) -> None: ...
    def set_transform(self, transform: List[Any]) -> None: ...
    def add_transform(self, transform: List[Any]) -> None: ...
    def to_dict(self) -> Dict[str, Any]: ...
    def set_parameter_label(self, parameter: Parameter, label: str) -> None:
        """
        Sets the Label used in the User Interface for the given parameter.
        :type parameter: str or Parameter
        :type label: str
        """
        ...
    def add_parameter_to_group(self, parameter: Parameter, group_name: str) -> str:
        """
        Add a parameter under a group (created if needed).
        :type parameter: str or Parameter
        :type group_name: str
        """
        ...
    def to_json(
        self,
        indent: int = ...,
        sort_keys: bool = ...,
        separators: Optional[Tuple[str, str]] = ...,
    ) -> str: ...
    def to_yaml(self, clean_up: bool = ..., long_form: bool = ...) -> str: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...

class Export(AWSHelperFn):
    def __init__(self, name: Union[AWSHelperFn, str]) -> None: ...

class Output(AWSDeclaration):
    props = ...
    def add_to_template(self): ...

class Parameter(AWSDeclaration):
    STRING_PROPERTIES = ...
    NUMBER_PROPERTIES = ...
    props = ...
    def add_to_template(self): ...
    def validate_title(self): ...
    def validate(self): ...
