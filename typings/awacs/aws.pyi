"""This type stub file was generated by pyright."""
from __future__ import annotations

from typing import Any, Dict, List, Union

from . import AWSHelperFn, AWSProperty

Allow = "Allow"
Deny = "Deny"
Everybody = "*"
CurrentTime = "aws:CurrentTime"
EpochTime = "aws:EpochTime"
MultiFactorAuthAge = "aws:MultiFactorAuthAge"
MultiFactorAuthPresent = "aws:MultiFactorAuthPresent"
PrincipalArn = "aws:PrincipalArn"
PrincipalOrgID = "aws:PrincipalOrgID"
PrincipalType = "aws:PrincipalType"
Referer = "aws:Referer"
RequestedRegion = "aws:RequestedRegion"
SecureTransport = "aws:SecureTransport"
SourceAccount = "aws:SourceAccount"
SourceArn = "aws:SourceArn"
SourceIp = "aws:SourceIp"
SourceVpc = "aws:SourceVpc"
SourceVpce = "aws:SourceVpce"
TagKeys = "aws:TagKeys"
TokenIssueTime = "aws:TokenIssueTime"
UserAgent = "aws:UserAgent"
userid = "aws:userid"
username = "aws:username"
VpcSourceIp = "aws:VpcSourceIp"

class Action(AWSHelperFn):
    def __init__(self, prefix, action=...) -> None: ...
    def JSONrepr(self): ...

class BaseARN(AWSHelperFn):
    def __init__(self, service, resource, region=..., account=...) -> None: ...
    def JSONrepr(self): ...

class ARN(BaseARN):
    def __init__(self, service, resource, region=..., account=...) -> None: ...

class ConditionElement(AWSHelperFn):
    def __init__(self, data: Union[Dict[str, Any], str], value: Any = ...,) -> None:
        """Create a ConditionElement

        There are two supported ways to create a new ConditionElement.
        For a simple key/value pair use something of the form:

            >>> StringEquals('s3:prefix': ['', 'home/']),

        If more than one condition is needed, pass a dict:

            >>> StringEquals({
            >>>    's3:prefix': ['', 'home/'],
            >>>    's3:delimiter': ['/'],
            >>> }),

        """
        ...
    def get_dict(self) -> Dict[str, Union[List[str], str]]: ...

class Condition(AWSHelperFn):
    def __init__(self, conditions) -> None: ...
    def JSONrepr(self): ...

class Principal(AWSHelperFn):
    VALID_PRINCIPALS = ...
    def __init__(self, principal, resources=...) -> None: ...
    def JSONrepr(self): ...

class AWSPrincipal(Principal):
    def __init__(self, principals) -> None: ...

def effect(x): ...

class Statement(AWSProperty):
    props = ...

class Policy(AWSProperty):
    props = ...
    def JSONrepr(self): ...

class PolicyDocument(Policy): ...

_condition_strings = [
    "ArnEquals",
    "ArnNotEquals",
    "ArnLike",
    "ArnNotLike",
    "Bool",
    "DateEquals",
    "DateNotEquals",
    "DateLessThan",
    "DateLessThanEquals",
    "DateGreaterThan",
    "DateGreaterThanEquals",
    "IpAddress",
    "NotIpAddress",
    "Null",
    "NumericEquals",
    "NumericNotEquals",
    "NumericLessThan",
    "NumericLessThanEquals",
    "NumericGreaterThan",
    "NumericGreaterThanEquals",
    "StringEquals",
    "StringNotEquals",
    "StringEqualsIgnoreCase",
    "StringNotEqualsIgnoreCase",
    "StringLike",
    "StringNotLike",
]
_condition_qualifier_strings = ["ForAnyValue", "ForAllValues"]

def make_condition(type_name: str, condition_name: str) -> None: ...

class ArnEquals(ConditionElement): ...
class ArnNotEquals(ConditionElement): ...
class ArnLike(ConditionElement): ...
class ArnNotLike(ConditionElement): ...
class Bool(ConditionElement): ...
class DateEquals(ConditionElement): ...
class DateNotEquals(ConditionElement): ...
class DateLessThan(ConditionElement): ...
class DateLessThanEquals(ConditionElement): ...
class DateGreaterThan(ConditionElement): ...
class DateGreaterThanEquals(ConditionElement): ...
class IpAddress(ConditionElement): ...
class NotIpAddress(ConditionElement): ...
class Null(ConditionElement): ...
class NumericEquals(ConditionElement): ...
class NumericNotEquals(ConditionElement): ...
class NumericLessThan(ConditionElement): ...
class NumericLessThanEquals(ConditionElement): ...
class NumericGreaterThan(ConditionElement): ...
class NumericGreaterThanEquals(ConditionElement): ...
class StringEquals(ConditionElement): ...
class StringNotEquals(ConditionElement): ...
class StringEqualsIgnoreCase(ConditionElement): ...
class StringNotEqualsIgnoreCase(ConditionElement): ...
class StringLike(ConditionElement): ...
class StringNotLike(ConditionElement): ...
class ArnEqualsIfExists(ConditionElement): ...
class ArnNotEqualsIfExists(ConditionElement): ...
class ArnLikeIfExists(ConditionElement): ...
class ArnNotLikeIfExists(ConditionElement): ...
class BoolIfExists(ConditionElement): ...
class DateEqualsIfExists(ConditionElement): ...
class DateNotEqualsIfExists(ConditionElement): ...
class DateLessThanIfExists(ConditionElement): ...
class DateLessThanEqualsIfExists(ConditionElement): ...
class DateGreaterThanIfExists(ConditionElement): ...
class DateGreaterThanEqualsIfExists(ConditionElement): ...
class IpAddressIfExists(ConditionElement): ...
class NotIpAddressIfExists(ConditionElement): ...
class NullIfExists(ConditionElement): ...
class NumericEqualsIfExists(ConditionElement): ...
class NumericNotEqualsIfExists(ConditionElement): ...
class NumericLessThanIfExists(ConditionElement): ...
class NumericLessThanEqualsIfExists(ConditionElement): ...
class NumericGreaterThanIfExists(ConditionElement): ...
class NumericGreaterThanEqualsIfExists(ConditionElement): ...
class StringEqualsIfExists(ConditionElement): ...
class StringNotEqualsIfExists(ConditionElement): ...
class StringEqualsIgnoreCaseIfExists(ConditionElement): ...
class StringNotEqualsIgnoreCaseIfExists(ConditionElement): ...
class StringLikeIfExists(ConditionElement): ...
class StringNotLikeIfExists(ConditionElement): ...
class ForAnyValueArnEquals(ConditionElement): ...
class ForAnyValueArnNotEquals(ConditionElement): ...
class ForAnyValueArnLike(ConditionElement): ...
class ForAnyValueArnNotLike(ConditionElement): ...
class ForAnyValueBool(ConditionElement): ...
class ForAnyValueDateEquals(ConditionElement): ...
class ForAnyValueDateNotEquals(ConditionElement): ...
class ForAnyValueDateLessThan(ConditionElement): ...
class ForAnyValueDateLessThanEquals(ConditionElement): ...
class ForAnyValueDateGreaterThan(ConditionElement): ...
class ForAnyValueDateGreaterThanEquals(ConditionElement): ...
class ForAnyValueIpAddress(ConditionElement): ...
class ForAnyValueNotIpAddress(ConditionElement): ...
class ForAnyValueNull(ConditionElement): ...
class ForAnyValueNumericEquals(ConditionElement): ...
class ForAnyValueNumericNotEquals(ConditionElement): ...
class ForAnyValueNumericLessThan(ConditionElement): ...
class ForAnyValueNumericLessThanEquals(ConditionElement): ...
class ForAnyValueNumericGreaterThan(ConditionElement): ...
class ForAnyValueNumericGreaterThanEquals(ConditionElement): ...
class ForAnyValueStringEquals(ConditionElement): ...
class ForAnyValueStringNotEquals(ConditionElement): ...
class ForAnyValueStringEqualsIgnoreCase(ConditionElement): ...
class ForAnyValueStringNotEqualsIgnoreCase(ConditionElement): ...
class ForAnyValueStringLike(ConditionElement): ...
class ForAnyValueStringNotLike(ConditionElement): ...
class ForAnyValueArnEqualsIfExists(ConditionElement): ...
class ForAnyValueArnNotEqualsIfExists(ConditionElement): ...
class ForAnyValueArnLikeIfExists(ConditionElement): ...
class ForAnyValueArnNotLikeIfExists(ConditionElement): ...
class ForAnyValueBoolIfExists(ConditionElement): ...
class ForAnyValueDateEqualsIfExists(ConditionElement): ...
class ForAnyValueDateNotEqualsIfExists(ConditionElement): ...
class ForAnyValueDateLessThanIfExists(ConditionElement): ...
class ForAnyValueDateLessThanEqualsIfExists(ConditionElement): ...
class ForAnyValueDateGreaterThanIfExists(ConditionElement): ...
class ForAnyValueDateGreaterThanEqualsIfExists(ConditionElement): ...
class ForAnyValueIpAddressIfExists(ConditionElement): ...
class ForAnyValueNotIpAddressIfExists(ConditionElement): ...
class ForAnyValueNullIfExists(ConditionElement): ...
class ForAnyValueNumericEqualsIfExists(ConditionElement): ...
class ForAnyValueNumericNotEqualsIfExists(ConditionElement): ...
class ForAnyValueNumericLessThanIfExists(ConditionElement): ...
class ForAnyValueNumericLessThanEqualsIfExists(ConditionElement): ...
class ForAnyValueNumericGreaterThanIfExists(ConditionElement): ...
class ForAnyValueNumericGreaterThanEqualsIfExists(ConditionElement): ...
class ForAnyValueStringEqualsIfExists(ConditionElement): ...
class ForAnyValueStringNotEqualsIfExists(ConditionElement): ...
class ForAnyValueStringEqualsIgnoreCaseIfExists(ConditionElement): ...
class ForAnyValueStringNotEqualsIgnoreCaseIfExists(ConditionElement): ...
class ForAnyValueStringLikeIfExists(ConditionElement): ...
class ForAnyValueStringNotLikeIfExists(ConditionElement): ...
class ForAllValuesArnEquals(ConditionElement): ...
class ForAllValuesArnNotEquals(ConditionElement): ...
class ForAllValuesArnLike(ConditionElement): ...
class ForAllValuesArnNotLike(ConditionElement): ...
class ForAllValuesBool(ConditionElement): ...
class ForAllValuesDateEquals(ConditionElement): ...
class ForAllValuesDateNotEquals(ConditionElement): ...
class ForAllValuesDateLessThan(ConditionElement): ...
class ForAllValuesDateLessThanEquals(ConditionElement): ...
class ForAllValuesDateGreaterThan(ConditionElement): ...
class ForAllValuesDateGreaterThanEquals(ConditionElement): ...
class ForAllValuesIpAddress(ConditionElement): ...
class ForAllValuesNotIpAddress(ConditionElement): ...
class ForAllValuesNull(ConditionElement): ...
class ForAllValuesNumericEquals(ConditionElement): ...
class ForAllValuesNumericNotEquals(ConditionElement): ...
class ForAllValuesNumericLessThan(ConditionElement): ...
class ForAllValuesNumericLessThanEquals(ConditionElement): ...
class ForAllValuesNumericGreaterThan(ConditionElement): ...
class ForAllValuesNumericGreaterThanEquals(ConditionElement): ...
class ForAllValuesStringEquals(ConditionElement): ...
class ForAllValuesStringNotEquals(ConditionElement): ...
class ForAllValuesStringEqualsIgnoreCase(ConditionElement): ...
class ForAllValuesStringNotEqualsIgnoreCase(ConditionElement): ...
class ForAllValuesStringLike(ConditionElement): ...
class ForAllValuesStringNotLike(ConditionElement): ...
class ForAllValuesArnEqualsIfExists(ConditionElement): ...
class ForAllValuesArnNotEqualsIfExists(ConditionElement): ...
class ForAllValuesArnLikeIfExists(ConditionElement): ...
class ForAllValuesArnNotLikeIfExists(ConditionElement): ...
class ForAllValuesBoolIfExists(ConditionElement): ...
class ForAllValuesDateEqualsIfExists(ConditionElement): ...
class ForAllValuesDateNotEqualsIfExists(ConditionElement): ...
class ForAllValuesDateLessThanIfExists(ConditionElement): ...
class ForAllValuesDateLessThanEqualsIfExists(ConditionElement): ...
class ForAllValuesDateGreaterThanIfExists(ConditionElement): ...
class ForAllValuesDateGreaterThanEqualsIfExists(ConditionElement): ...
class ForAllValuesIpAddressIfExists(ConditionElement): ...
class ForAllValuesNotIpAddressIfExists(ConditionElement): ...
class ForAllValuesNullIfExists(ConditionElement): ...
class ForAllValuesNumericEqualsIfExists(ConditionElement): ...
class ForAllValuesNumericNotEqualsIfExists(ConditionElement): ...
class ForAllValuesNumericLessThanIfExists(ConditionElement): ...
class ForAllValuesNumericLessThanEqualsIfExists(ConditionElement): ...
class ForAllValuesNumericGreaterThanIfExists(ConditionElement): ...
class ForAllValuesNumericGreaterThanEqualsIfExists(ConditionElement): ...
class ForAllValuesStringEqualsIfExists(ConditionElement): ...
class ForAllValuesStringNotEqualsIfExists(ConditionElement): ...
class ForAllValuesStringEqualsIgnoreCaseIfExists(ConditionElement): ...
class ForAllValuesStringNotEqualsIgnoreCaseIfExists(ConditionElement): ...
class ForAllValuesStringLikeIfExists(ConditionElement): ...
class ForAllValuesStringNotLikeIfExists(ConditionElement): ...
