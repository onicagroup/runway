"""This type stub file was generated by pyright."""

from __future__ import annotations

import logging
from typing import Any, Iterator

from docker import utils

log: logging.Logger = ...

class ImageApiMixin:
    @utils.check_resource("image")
    def get_image(self, image: str, chunk_size: int = ...) -> Iterator[bytes]: ...
    @utils.check_resource("image")
    def history(self, image: str) -> str: ...
    def images(
        self,
        name: str = ...,
        quiet: bool = ...,
        all: bool = ...,
        filters: dict[str, Any] | None = ...,
    ) -> dict[str, Any] | list[dict[str, Any]]: ...
    def import_image(
        self, src=..., repository=..., tag=..., image=..., changes=..., stream_src=...
    ): ...
    def import_image_from_data(self, data, repository=..., tag=..., changes=...): ...
    def import_image_from_file(self, filename, repository=..., tag=..., changes=...): ...
    def import_image_from_stream(self, stream, repository=..., tag=..., changes=...): ...
    def import_image_from_url(self, url, repository=..., tag=..., changes=...): ...
    def import_image_from_image(self, image, repository=..., tag=..., changes=...): ...
    @utils.check_resource("image")
    def inspect_image(self, image: str) -> dict[str, Any]: ...
    @utils.minimum_version("1.30")
    @utils.check_resource("image")
    def inspect_distribution(
        self, image: str, auth_config: dict[str, Any] | None = ...
    ) -> dict[str, Any]: ...
    def load_image(self, data: bytes, quiet: bool = ...) -> Iterator[dict[str, Any]]: ...
    @utils.minimum_version("1.25")
    def prune_images(self, filters: dict[str, Any] | None = ...) -> dict[str, Any]: ...
    def pull(
        self,
        repository: str | None,
        tag: str | None = ...,
        stream: bool = ...,
        auth_config: dict[str, Any] | None = ...,
        decode: bool = ...,
        platform: str | None = ...,
        all_tags: bool = ...,
    ) -> Iterator[dict[str, Any]] | Iterator[bytes] | Iterator[str] | str: ...
    def push(
        self,
        repository: str | None,
        tag: str | None = ...,
        stream: bool = ...,
        auth_config: dict[str, Any] | None = ...,
        decode: bool = ...,
    ) -> Iterator[dict[str, Any]] | Iterator[bytes] | Iterator[str] | str: ...
    @utils.check_resource("image")
    def remove_image(
        self, image: str, force: bool = ..., noprune: bool = ...
    ) -> dict[str, Any]: ...
    def search(self, term: str, limit: int | None = ...) -> list[dict[str, Any]]: ...
    @utils.check_resource("image")
    def tag(
        self, image: str, repository: str | None, tag: str = ..., force: bool = ...
    ) -> bool: ...

def is_file(src: str) -> bool: ...
