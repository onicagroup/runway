"""This type stub file was generated by pyright."""
# pylint: disable=C,E,W,R
from __future__ import annotations

from typing import Any, Dict, List, Optional, Tuple, Union

from docker.types.healthcheck import Healthcheck
from typing_extensions import Literal

class TaskTemplate(Dict[str, Any]):
    def __init__(
        self,
        container_spec: ContainerSpec,
        resources: Optional[Resources] = ...,
        restart_policy: Optional[RestartPolicy] = ...,
        placement: Optional[Placement] = ...,
        log_driver: Optional[DriverConfig] = ...,
        networks: Optional[List[Union[str, NetworkAttachmentConfig]]] = ...,
        force_update: Optional[int] = ...,
    ) -> None: ...
    @property
    def container_spec(self) -> ContainerSpec: ...
    @property
    def resources(self) -> Optional[Resources]: ...
    @property
    def restart_policy(self) -> Optional[RestartPolicy]: ...
    @property
    def placement(self) -> Optional[Placement]: ...

class ContainerSpec(Dict[str, Any]):
    def __init__(
        self,
        image: str,
        command: Optional[Union[List[str], str]] = ...,
        args: Optional[List[str]] = ...,
        hostname: Optional[str] = ...,
        env: Optional[Dict[str, str]] = ...,
        workdir: Optional[str] = ...,
        user: Optional[str] = ...,
        labels: Optional[Dict[str, Any]] = ...,
        mounts: Optional[Union[List[str], List[Mount], List[Union[Mount, str]]]] = ...,
        stop_grace_period: Optional[int] = ...,
        secrets: Optional[List[SecretReference]] = ...,
        tty: Optional[bool] = ...,
        groups: Optional[List[str]] = ...,
        open_stdin: Optional[bool] = ...,
        read_only: Optional[bool] = ...,
        stop_signal: Optional[str] = ...,
        healthcheck: Optional[Healthcheck] = ...,
        hosts: Optional[Dict[str, Any]] = ...,
        dns_config: Optional[DNSConfig] = ...,
        configs: Optional[List[ConfigReference]] = ...,
        privileges: Optional[Privileges] = ...,
        isolation: Optional[str] = ...,
        init: Optional[bool] = ...,
    ) -> None: ...

class Mount(Dict[str, Any]):
    def __init__(
        self,
        target: str,
        source: str,
        type: Optional[Literal["bind", "npipe", "tmpfs", "volume"]] = ...,
        read_only: bool = ...,
        consistency: Optional[str] = ...,
        propagation: Optional[str] = ...,
        no_copy: bool = ...,
        labels: Dict[str, Any] = ...,
        driver_config: DriverConfig = ...,
        tmpfs_size: Union[int, str] = ...,
        tmpfs_mode: int = ...,
    ) -> None: ...
    @classmethod
    def parse_mount_string(cls, string: str) -> Mount: ...

class Resources(Dict[str, Any]):
    def __init__(
        self,
        cpu_limit: Optional[int] = ...,
        mem_limit: Optional[int] = ...,
        cpu_reservation: Optional[int] = ...,
        mem_reservation: Optional[Any] = ...,
        generic_resources: Optional[Union[Dict[str, Any], List[Any]]] = ...,
    ) -> None: ...

class UpdateConfig(Dict[str, Any]):
    def __init__(
        self,
        parallelism: int = ...,
        delay: Optional[int] = ...,
        failure_action: str = ...,
        monitor: Optional[int] = ...,
        max_failure_ratio: Optional[float] = ...,
        order: Optional[str] = ...,
    ) -> None: ...

class RollbackConfig(UpdateConfig): ...

class RestartConditionTypesEnum:
    _values: Tuple[Literal["none"], Literal["on-failure"], Literal["any"]] = ...
    NONE: Literal["none"] = ...
    ON_FAILURE: Literal["on-failure"] = ...
    ANY: Literal["any"] = ...

class RestartPolicy(Dict[str, Any]):
    condition_types = RestartConditionTypesEnum
    def __init__(
        self,
        condition: Literal["any", "none", "on-failure"] = ...,
        delay: int = ...,
        max_attempts: int = ...,
        window: int = ...,
    ) -> None: ...

class DriverConfig(Dict[str, Any]):
    def __init__(self, name: str, options: Optional[Dict[str, Any]] = ...) -> None: ...

class EndpointSpec(Dict[str, Any]):
    def __init__(
        self,
        mode: Optional[str] = ...,
        ports: Optional[
            Dict[
                int,
                Union[
                    int,
                    Tuple[int],
                    Tuple[int, Optional[str]],
                    Tuple[int, Optional[str], Optional[str]],
                ],
            ]
        ] = ...,
    ) -> None: ...

def convert_service_ports(
    ports: Union[
        Dict[
            int,
            Union[
                int,
                Tuple[int],
                Tuple[int, Optional[str]],
                Tuple[int, Optional[str], Optional[str]],
            ],
        ],
        List[int],
    ]
) -> List[Dict[str, Any]]: ...

class ServiceMode(Dict[str, Any]):
    def __init__(self, mode: str, replicas: Optional[int] = ...) -> None: ...
    @property
    def mode(self) -> str: ...
    @property
    def replicas(self) -> int: ...

class SecretReference(Dict[str, Any]):
    def __init__(
        self,
        secret_id: str,
        secret_name: str,
        filename: Optional[str] = ...,
        uid: Optional[str] = ...,
        gid: Optional[str] = ...,
        mode: int = ...,
    ) -> None: ...

class ConfigReference(Dict[str, Any]):
    def __init__(
        self,
        config_id: str,
        config_name: str,
        filename: Optional[str] = ...,
        uid: Optional[str] = ...,
        gid: Optional[str] = ...,
        mode: int = ...,
    ) -> None: ...

class Placement(Dict[str, Any]):
    def __init__(
        self,
        constraints: Optional[List[str]] = ...,
        preferences: Optional[List[Tuple[Any, Any]]] = ...,
        platforms: Optional[List[Tuple[Any, Any]]] = ...,
        maxreplicas: Optional[int] = ...,
    ) -> None: ...

class PlacementPreference(Dict[str, Any]):
    def __init__(self, strategy: str, descriptor: str) -> None: ...

class DNSConfig(Dict[str, Any]):
    def __init__(
        self,
        nameservers: Optional[List[str]] = ...,
        search: Optional[List[str]] = ...,
        options: Optional[List[str]] = ...,
    ) -> None: ...

class Privileges(Dict[str, Any]):
    def __init__(
        self,
        credentialspec_file: Optional[str] = ...,
        credentialspec_registry: Optional[str] = ...,
        selinux_disable: Optional[bool] = ...,
        selinux_user: Optional[str] = ...,
        selinux_role: Optional[str] = ...,
        selinux_type: Optional[str] = ...,
        selinux_level: Optional[str] = ...,
    ) -> None: ...

class NetworkAttachmentConfig(Dict[str, Any]):
    def __init__(
        self,
        target: str,
        aliases: Optional[List[str]] = ...,
        options: Optional[Dict[str, Any]] = ...,
    ) -> None: ...
