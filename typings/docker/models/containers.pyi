"""This type stub file was generated by pyright."""
# pylint: disable=C,E,W,R
from __future__ import annotations

import datetime
from socket import SocketIO
from typing import (
    Any,
    Dict,
    Iterator,
    List,
    NamedTuple,
    Optional,
    Tuple,
    Union,
    overload,
)

from docker.models.images import Image
from docker.models.resource import Collection, Model
from docker.types.containers import DeviceRequest, LogConfig, Ulimit
from docker.types.services import Mount
from typing_extensions import Literal

ExecResult = NamedTuple(
    "ExecResult",
    [
        ("exit_code", Optional[int]),
        ("output", Union[bytes, Iterator[bytes], SocketIO, Tuple[bytes, bytes]]),
    ],
)
_ExecResultBytes = NamedTuple(
    "_ExecResultBytes",
    [("exit_code", Optional[int]), ("output", bytes)],
)
_ExecResultIterator = NamedTuple(
    "_ExecResultIterator",
    [("exit_code", None), ("output", Iterator[bytes])],
)
_ExecResultSocket = NamedTuple(
    "_ExecResultSocket",
    [("exit_code", None), ("output", SocketIO)],
)
_ExecResultTuple = NamedTuple(
    "_ExecResultTuple",
    [("exit_code", None), ("output", Tuple[bytes, bytes])],
)

class Container(Model):
    @property
    def name(self) -> Optional[str]: ...
    @property
    def image(self) -> Optional[Image]: ...
    @property
    def labels(self) -> Dict[str, str]: ...
    @property
    def status(self) -> str: ...
    @property
    def ports(self) -> Dict[str, Union[int, List[int]]]: ...
    @overload
    def attach(self, *, stream: Literal[True] = ...) -> Iterator[str]: ...
    @overload
    def attach(self, *, stream: Literal[False] = ...) -> str: ...
    @overload
    def attach(
        self,
        *,
        logs: bool = ...,
        stderr: bool = ...,
        stdout: bool = ...,
        stream: Literal[False] = ...,
    ) -> str: ...
    def attach(
        self,
        *,
        logs: bool = ...,
        stderr: bool = ...,
        stdout: bool = ...,
        stream: bool = ...,
    ) -> Union[Iterator[str], str]: ...
    def attach_socket(self, **kwargs: Any) -> Any: ...
    def commit(self, repository: str = ..., tag: str = ..., **kwargs: Any) -> Any: ...
    def diff(self) -> str: ...
    @overload
    def exec_run(
        self,
        cmd: Union[List[str], str],
        stdout: bool = ...,
        stderr: bool = ...,
        stdin: bool = ...,
        tty: bool = ...,
        privileged: bool = ...,
        user: str = ...,
        detach: bool = ...,
        environment: Union[Dict[str, str], List[str]] = ...,
        workdir: str = ...,
    ) -> _ExecResultBytes: ...
    @overload
    def exec_run(
        self,
        cmd: Union[List[str], str],
        stdout: bool = ...,
        stderr: bool = ...,
        stdin: bool = ...,
        tty: bool = ...,
        privileged: bool = ...,
        user: str = ...,
        detach: bool = ...,
        stream: Literal[True] = ...,
        environment: Union[Dict[str, str], List[str]] = ...,
        workdir: str = ...,
    ) -> _ExecResultIterator: ...
    @overload
    def exec_run(
        self,
        cmd: Union[List[str], str],
        stdout: bool = ...,
        stderr: bool = ...,
        stdin: bool = ...,
        tty: bool = ...,
        privileged: bool = ...,
        user: str = ...,
        detach: bool = ...,
        socket: Literal[True] = ...,
        environment: Union[Dict[str, str], List[str]] = ...,
        workdir: str = ...,
    ) -> _ExecResultSocket: ...
    @overload
    def exec_run(
        self,
        cmd: Union[List[str], str],
        stdin: bool = ...,
        tty: bool = ...,
        privileged: bool = ...,
        user: str = ...,
        detach: bool = ...,
        environment: Union[Dict[str, str], List[str]] = ...,
        workdir: str = ...,
        demux: Literal[True] = ...,
    ) -> _ExecResultTuple: ...
    def exec_run(
        self,
        cmd: Union[List[str], str],
        stdout: bool = ...,
        stderr: bool = ...,
        stdin: bool = ...,
        tty: bool = ...,
        privileged: bool = ...,
        user: str = ...,
        detach: bool = ...,
        stream: bool = ...,
        socket: bool = ...,
        environment: Union[Dict[str, str], List[str]] = ...,
        workdir: str = ...,
        demux: bool = ...,
    ) -> ExecResult: ...
    def export(self, chunk_size: int = ...) -> str: ...
    def get_archive(
        self, path: str, chunk_size: int = ..., encode_stream: bool = ...
    ) -> Tuple[Iterator[bytes], Dict[str, Any]]: ...
    def kill(self, signal: Union[int, str] = ...) -> Any: ...
    @overload
    def logs(
        self,
        *,
        follow: bool = ...,
        since: Optional[Union[datetime.datetime, int]] = ...,
        stderr: bool = ...,
        stdout: bool = ...,
        stream: Literal[False] = ...,
        tail: Optional[Union[int, str]] = ...,
        timestamps: bool = ...,
        until: Optional[Union[datetime.datetime, int]] = ...,
    ) -> bytes: ...
    @overload
    def logs(
        self,
        *,
        follow: bool = ...,
        since: Optional[Union[datetime.datetime, int]] = ...,
        stderr: bool = ...,
        stdout: bool = ...,
        stream: Literal[True] = ...,
        tail: Optional[Union[int, str]] = ...,
        timestamps: bool = ...,
        until: Optional[Union[datetime.datetime, int]] = ...,
    ) -> Iterator[bytes]: ...
    def logs(
        self,
        *,
        follow: bool = ...,
        since: Optional[Union[datetime.datetime, int]] = ...,
        stderr: bool = ...,
        stdout: bool = ...,
        stream: bool = ...,
        tail: Optional[Union[int, str]] = ...,
        timestamps: bool = ...,
        until: Optional[Union[datetime.datetime, int]] = ...,
    ) -> Union[Iterator[bytes], bytes]: ...
    def pause(self) -> Any: ...
    def put_archive(self, path: str, data: bytes) -> bool: ...
    def remove(self, **kwargs: Any) -> Any: ...
    def rename(self, name: str) -> Any: ...
    def resize(self, height: int, width: int) -> Any: ...
    def restart(self, **kwargs: Any) -> Any: ...
    def start(self, **kwargs: Any) -> Any: ...
    def stats(self, **kwargs: Any) -> Any: ...
    def stop(self, **kwargs: Any) -> Any: ...
    def top(self, **kwargs: Any) -> str: ...
    def unpause(self) -> Any: ...
    def update(self, **kwargs: Any) -> Dict[str, Any]: ...
    def wait(self, **kwargs: Any) -> Dict[str, Any]: ...

class ContainerCollection(Collection):
    model = Container
    @overload
    def run(
        self,
        image: Union[Image, str],
        command: Union[List[str], str] = ...,
        stdout: bool = ...,
        stderr: bool = ...,
        remove: bool = ...,
        *,
        auto_remove: bool = ...,
        blkio_weight: int = ...,
        blkio_weight_device: List[Dict[str, Any]] = ...,
        cap_add: Union[List[str], str] = ...,
        cap_drop: Union[List[str], str] = ...,
        cgroup_parent: str = ...,
        cpi_count: int = ...,
        cpu_percent: int = ...,
        cpu_period: int = ...,
        cpu_quota: int = ...,
        cpu_rt_period: int = ...,
        cpu_rt_runtime: int = ...,
        cpu_shares: int = ...,
        cpuset_cpus: str = ...,
        cpuset_mems: str = ...,
        detach: Literal[False] = ...,
        device_cgroup_rules: List[Any] = ...,
        device_read_bps: List[Dict[str, Any]] = ...,
        device_read_iops: Any = ...,
        device_requests: List[DeviceRequest] = ...,
        device_write_bps: Any = ...,
        device_write_iops: Any = ...,
        devices: List[str] = ...,
        dns: List[Any] = ...,
        dns_opt: List[Any] = ...,
        dns_search: List[Any] = ...,
        domainname: Union[List[str], str] = ...,
        entrypoint: Union[List[str], str] = ...,
        environment: Optional[Union[Dict[str, str], List[str]]] = ...,
        extra_hosts: Dict[str, str] = ...,
        group_add: List[Any] = ...,
        healthcheck: Dict[str, Any] = ...,
        hostname: Optional[str] = ...,
        init: bool = ...,
        init_path: str = ...,
        ipc_mode: str = ...,
        isolation: Optional[str] = ...,
        kernel_memory: Union[int, str] = ...,
        labels: Union[Dict[str, str], List[str]] = ...,
        links: Dict[str, str] = ...,
        log_config: LogConfig = ...,
        lxc_conf: Dict[str, Any] = ...,
        mac_address: Optional[str] = ...,
        mem_limit: Union[int, str] = ...,
        mem_reservation: Union[int, str] = ...,
        mem_swappiness: int = ...,
        memswap_limit: Union[int, str] = ...,
        mounts: List[Mount] = ...,
        name: Optional[str] = ...,
        nano_cpus: int = ...,
        network: Optional[str] = ...,
        network_disabled: bool = ...,
        network_mode: Optional[str] = ...,
        oom_kill_disable: bool = ...,
        oom_score_adj: int = ...,
        pid_limit: int = ...,
        pid_mode: str = ...,
        platform: Optional[str] = ...,
        ports: Dict[str, Any] = ...,
        privileged: bool = ...,
        publish_all_ports: bool = ...,
        read_only: bool = ...,
        restart_policy: Dict[str, Any] = ...,
        runtime: Optional[str] = ...,
        security_opt: List[str] = ...,
        shm_size: Union[int, str] = ...,
        stdin_open: bool = ...,
        stop_signal: str = ...,
        storage_opt: Dict[str, Any] = ...,
        stream: bool = ...,
        stsctls: Dict[str, Any] = ...,
        tmpfs: Dict[str, Any] = ...,
        tty: bool = ...,
        ulimits: List[Ulimit] = ...,
        use_config_proxy: bool = ...,
        user: Union[int, str] = ...,
        userns_mode: Optional[Literal["host"]] = ...,
        uts_mode: Optional[Literal["host"]] = ...,
        version: str = ...,
        volume_driver: str = ...,
        volumes: Union[Dict[str, str], List[str]] = ...,
        volumes_from: List[str] = ...,
        working_dir: str = ...,
    ) -> Optional[bytes]: ...
    @overload
    def run(
        self,
        image: Union[Image, str],
        command: Union[List[str], str] = ...,
        stdout: bool = ...,
        stderr: bool = ...,
        remove: bool = ...,
        *,
        auto_remove: bool = ...,
        blkio_weight: int = ...,
        blkio_weight_device: List[Dict[str, Any]] = ...,
        cap_add: Union[List[str], str] = ...,
        cap_drop: Union[List[str], str] = ...,
        cgroup_parent: str = ...,
        cpi_count: int = ...,
        cpu_percent: int = ...,
        cpu_period: int = ...,
        cpu_quota: int = ...,
        cpu_rt_period: int = ...,
        cpu_rt_runtime: int = ...,
        cpu_shares: int = ...,
        cpuset_cpus: str = ...,
        cpuset_mems: str = ...,
        detach: Literal[True] = ...,
        device_cgroup_rules: List[Any] = ...,
        device_read_bps: List[Dict[str, Any]] = ...,
        device_read_iops: Any = ...,
        device_requests: List[DeviceRequest] = ...,
        device_write_bps: Any = ...,
        device_write_iops: Any = ...,
        devices: List[str] = ...,
        dns: List[Any] = ...,
        dns_opt: List[Any] = ...,
        dns_search: List[Any] = ...,
        domainname: Union[List[str], str] = ...,
        entrypoint: Union[List[str], str] = ...,
        environment: Optional[Union[Dict[str, str], List[str]]] = ...,
        extra_hosts: Dict[str, str] = ...,
        group_add: List[Any] = ...,
        healthcheck: Dict[str, Any] = ...,
        hostname: Optional[str] = ...,
        init: bool = ...,
        init_path: str = ...,
        ipc_mode: str = ...,
        isolation: Optional[str] = ...,
        kernel_memory: Union[int, str] = ...,
        labels: Union[Dict[str, str], List[str]] = ...,
        links: Dict[str, str] = ...,
        log_config: LogConfig = ...,
        lxc_conf: Dict[str, Any] = ...,
        mac_address: Optional[str] = ...,
        mem_limit: Union[int, str] = ...,
        mem_reservation: Union[int, str] = ...,
        mem_swappiness: int = ...,
        memswap_limit: Union[int, str] = ...,
        mounts: List[Mount] = ...,
        name: Optional[str] = ...,
        nano_cpus: int = ...,
        network: Optional[str] = ...,
        network_disabled: bool = ...,
        network_mode: Optional[str] = ...,
        oom_kill_disable: bool = ...,
        oom_score_adj: int = ...,
        pid_limit: int = ...,
        pid_mode: str = ...,
        platform: Optional[str] = ...,
        ports: Dict[str, Any] = ...,
        privileged: bool = ...,
        publish_all_ports: bool = ...,
        read_only: bool = ...,
        restart_policy: Dict[str, Any] = ...,
        runtime: Optional[str] = ...,
        security_opt: List[str] = ...,
        shm_size: Union[int, str] = ...,
        stdin_open: bool = ...,
        stop_signal: str = ...,
        storage_opt: Dict[str, Any] = ...,
        stream: bool = ...,
        stsctls: Dict[str, Any] = ...,
        tmpfs: Dict[str, Any] = ...,
        tty: bool = ...,
        ulimits: List[Ulimit] = ...,
        use_config_proxy: bool = ...,
        user: Union[int, str] = ...,
        userns_mode: Optional[Literal["host"]] = ...,
        uts_mode: Optional[Literal["host"]] = ...,
        version: str = ...,
        volume_driver: str = ...,
        volumes: Union[Dict[str, str], List[str]] = ...,
        volumes_from: List[str] = ...,
        working_dir: str = ...,
    ) -> Container: ...
    def run(
        self,
        image: Union[Image, str],
        command: Union[List[str], str] = ...,
        stdout: bool = ...,
        stderr: bool = ...,
        remove: bool = ...,
        *,
        auto_remove: bool = ...,
        blkio_weight: int = ...,
        blkio_weight_device: List[Dict[str, Any]] = ...,
        cap_add: Union[List[str], str] = ...,
        cap_drop: Union[List[str], str] = ...,
        cgroup_parent: str = ...,
        cpi_count: int = ...,
        cpu_percent: int = ...,
        cpu_period: int = ...,
        cpu_quota: int = ...,
        cpu_rt_period: int = ...,
        cpu_rt_runtime: int = ...,
        cpu_shares: int = ...,
        cpuset_cpus: str = ...,
        cpuset_mems: str = ...,
        detach: bool = ...,
        device_cgroup_rules: List[Any] = ...,
        device_read_bps: List[Dict[str, Any]] = ...,
        device_read_iops: Any = ...,
        device_requests: List[DeviceRequest] = ...,
        device_write_bps: Any = ...,
        device_write_iops: Any = ...,
        devices: List[str] = ...,
        dns: List[Any] = ...,
        dns_opt: List[Any] = ...,
        dns_search: List[Any] = ...,
        domainname: Union[List[str], str] = ...,
        entrypoint: Union[List[str], str] = ...,
        environment: Optional[Union[Dict[str, str], List[str]]] = ...,
        extra_hosts: Dict[str, str] = ...,
        group_add: List[Any] = ...,
        healthcheck: Dict[str, Any] = ...,
        hostname: Optional[str] = ...,
        init: bool = ...,
        init_path: str = ...,
        ipc_mode: str = ...,
        isolation: Optional[str] = ...,
        kernel_memory: Union[int, str] = ...,
        labels: Union[Dict[str, str], List[str]] = ...,
        links: Dict[str, str] = ...,
        log_config: LogConfig = ...,
        lxc_conf: Dict[str, Any] = ...,
        mac_address: Optional[str] = ...,
        mem_limit: Union[int, str] = ...,
        mem_reservation: Union[int, str] = ...,
        mem_swappiness: int = ...,
        memswap_limit: Union[int, str] = ...,
        mounts: List[Mount] = ...,
        name: Optional[str] = ...,
        nano_cpus: int = ...,
        network: Optional[str] = ...,
        network_disabled: bool = ...,
        network_mode: Optional[str] = ...,
        oom_kill_disable: bool = ...,
        oom_score_adj: int = ...,
        pid_limit: int = ...,
        pid_mode: str = ...,
        platform: Optional[str] = ...,
        ports: Dict[str, Any] = ...,
        privileged: bool = ...,
        publish_all_ports: bool = ...,
        read_only: bool = ...,
        restart_policy: Dict[str, Any] = ...,
        runtime: Optional[str] = ...,
        security_opt: List[str] = ...,
        shm_size: Union[int, str] = ...,
        stdin_open: bool = ...,
        stop_signal: str = ...,
        storage_opt: Dict[str, Any] = ...,
        stream: bool = ...,
        stsctls: Dict[str, Any] = ...,
        tmpfs: Dict[str, Any] = ...,
        tty: bool = ...,
        ulimits: List[Ulimit] = ...,
        use_config_proxy: bool = ...,
        user: Union[int, str] = ...,
        userns_mode: Optional[Literal["host"]] = ...,
        uts_mode: Optional[Literal["host"]] = ...,
        version: str = ...,
        volume_driver: str = ...,
        volumes: Union[Dict[str, str], List[str]] = ...,
        volumes_from: List[str] = ...,
        working_dir: str = ...,
    ) -> Any: ...
    def create(
        self,
        image: Union[Image, str],
        command: Union[List[str], str] = ...,
        *,
        auto_remove: bool = ...,
        blkio_weight: int = ...,
        blkio_weight_device: List[Dict[str, Any]] = ...,
        cap_add: Union[List[str], str] = ...,
        cap_drop: Union[List[str], str] = ...,
        cgroup_parent: str = ...,
        cpi_count: int = ...,
        cpu_percent: int = ...,
        cpu_period: int = ...,
        cpu_quota: int = ...,
        cpu_rt_period: int = ...,
        cpu_rt_runtime: int = ...,
        cpu_shares: int = ...,
        cpuset_cpus: str = ...,
        cpuset_mems: str = ...,
        detach: bool = ...,
        device_cgroup_rules: List[Any] = ...,
        device_read_bps: List[Dict[str, Any]] = ...,
        device_read_iops: Any = ...,
        device_requests: List[DeviceRequest] = ...,
        device_write_bps: Any = ...,
        device_write_iops: Any = ...,
        devices: List[str] = ...,
        dns: List[Any] = ...,
        dns_opt: List[Any] = ...,
        dns_search: List[Any] = ...,
        domainname: Union[List[str], str] = ...,
        entrypoint: Union[List[str], str] = ...,
        environment: Optional[Union[Dict[str, str], List[str]]] = ...,
        extra_hosts: Dict[str, str] = ...,
        group_add: List[Any] = ...,
        healthcheck: Dict[str, Any] = ...,
        hostname: Optional[str] = ...,
        init: bool = ...,
        init_path: str = ...,
        ipc_mode: str = ...,
        isolation: Optional[str] = ...,
        kernel_memory: Union[int, str] = ...,
        labels: Union[Dict[str, str], List[str]] = ...,
        links: Dict[str, str] = ...,
        log_config: LogConfig = ...,
        lxc_conf: Dict[str, Any] = ...,
        mac_address: Optional[str] = ...,
        mem_limit: Union[int, str] = ...,
        mem_reservation: Union[int, str] = ...,
        mem_swappiness: int = ...,
        memswap_limit: Union[int, str] = ...,
        mounts: List[Mount] = ...,
        name: Optional[str] = ...,
        nano_cpus: int = ...,
        network: Optional[str] = ...,
        network_disabled: bool = ...,
        network_mode: Optional[str] = ...,
        oom_kill_disable: bool = ...,
        oom_score_adj: int = ...,
        pid_limit: int = ...,
        pid_mode: str = ...,
        platform: Optional[str] = ...,
        ports: Dict[str, Any] = ...,
        privileged: bool = ...,
        publish_all_ports: bool = ...,
        read_only: bool = ...,
        restart_policy: Dict[str, Any] = ...,
        runtime: Optional[str] = ...,
        security_opt: List[str] = ...,
        shm_size: Union[int, str] = ...,
        stdin_open: bool = ...,
        stop_signal: str = ...,
        storage_opt: Dict[str, Any] = ...,
        stream: bool = ...,
        stsctls: Dict[str, Any] = ...,
        tmpfs: Dict[str, Any] = ...,
        tty: bool = ...,
        ulimits: List[Ulimit] = ...,
        use_config_proxy: bool = ...,
        user: Union[int, str] = ...,
        userns_mode: Optional[Literal["host"]] = ...,
        uts_mode: Optional[Literal["host"]] = ...,
        version: str = ...,
        volume_driver: str = ...,
        volumes: Union[Dict[str, str], List[str]] = ...,
        volumes_from: List[str] = ...,
        working_dir: str = ...,
    ) -> Container: ...
    def get(self, container_id: str) -> Container: ...
    def list(
        self,
        *,
        all: bool = ...,
        before: str = ...,
        filters: Dict[str, Any] = ...,
        limit: int = ...,
        since: str = ...,
        sparse: bool = ...,
        ignore_removed: bool = ...,
    ) -> List[Container]: ...
    def prune(self, filters: Dict[str, Any] = ...) -> Dict[str, Any]: ...

RUN_CREATE_KWARGS: List[str] = ...
RUN_HOST_CONFIG_KWARGS: List[str] = ...
