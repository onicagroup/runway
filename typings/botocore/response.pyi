"""This type stub file was generated by pyright."""
import logging
from typing import BinaryIO, Generator, Optional

logger = logging.getLogger(__name__)

class StreamingBody(object):
    """Wrapper class for an http response body.

    This provides a few additional conveniences that do not exist
    in the urllib3 model:

        * Set the timeout on the socket (i.e read() timeouts)
        * Auto validation of content length, if the amount of bytes
          we read does not match the content length, an exception
          is raised.

    """

    _DEFAULT_CHUNK_SIZE: int = ...
    _amount_read: int
    _content_length: int
    _raw_stream: BinaryIO
    def __init__(self, raw_stream: BinaryIO, content_length: int) -> None: ...
    def set_socket_timeout(self, timeout: int) -> None:
        """Set the timeout seconds on the socket."""
        ...
    def read(self, amt: Optional[int] = ...) -> bytes:
        """Read at most amt bytes from the stream.

        If the amt argument is omitted, read all data.
        """
        ...
    def __iter__(self) -> Generator[bytes, None, None]:
        """Return an iterator to yield 1k chunks from the raw stream.
        """
        ...
    def __next__(self) -> bytes:
        """Return the next 1k chunk from the raw stream.
        """
        ...
    next = ...
    def iter_lines(
        self, chunk_size: int = ..., keepends: bool = ...
    ) -> Generator[bytes, None, None]:
        """Return an iterator to yield lines from the raw stream.

        This is achieved by reading chunk of bytes (of size chunk_size) at a
        time from the raw stream, and then yielding lines from there.
        """
        ...
    def iter_chunks(self, chunk_size: int = ...) -> Generator[bytes, None, None]:
        """Return an iterator to yield chunks of chunk_size bytes from the raw
        stream.
        """
        ...
    def close(self) -> None:
        """Close the underlying http response stream."""
        ...

def get_response(operation_model, http_response): ...
