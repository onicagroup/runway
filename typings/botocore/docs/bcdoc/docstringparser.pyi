"""
This type stub file was generated by pyright.
"""

from botocore.compat import six

class DocStringParser(six.moves.html_parser.HTMLParser):
    """
    A simple HTML parser.  Focused on converting the subset of HTML
    that appears in the documentation strings of the JSON models into
    simple ReST format.
    """

    def __init__(self, doc) -> None: ...
    def reset(self): ...
    def feed(self, data): ...
    def close(self): ...
    def handle_starttag(self, tag, attrs): ...
    def handle_endtag(self, tag): ...
    def handle_data(self, data): ...

class HTMLTree(object):
    """
    A tree which handles HTML nodes. Designed to work with a python HTML parser,
    meaning that the current_node will be the most recently opened tag. When
    a tag is closed, the current_node moves up to the parent node.
    """

    def __init__(self, doc) -> None: ...
    def add_tag(self, tag, attrs=..., is_start=...): ...
    def add_data(self, data): ...
    def write(self): ...

class Node(object):
    def __init__(self, parent=...) -> None: ...
    def write(self, doc): ...

class StemNode(Node):
    def __init__(self, parent=...) -> None: ...
    def add_child(self, child): ...
    def write(self, doc): ...

class TagNode(StemNode):
    """
    A generic Tag node. It will verify that handlers exist before writing.
    """

    def __init__(self, tag, attrs=..., parent=...) -> None: ...
    def write(self, doc): ...

class LineItemNode(TagNode):
    def __init__(self, attrs=..., parent=...) -> None: ...
    def write(self, doc): ...

class DataNode(Node):
    """
    A Node that contains only string data.
    """

    def __init__(self, data, parent=...) -> None: ...
    def lstrip(self): ...
    def write(self, doc): ...
