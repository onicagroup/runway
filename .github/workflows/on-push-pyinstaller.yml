name: Pyinstaller (on_push)


on:
  push:
    paths:
      - .github/scripts/cicd/build_pyinstaller.sh
      - .github/workflows/on-push-pyinstaller.yml
      - runway/*
      - poetry.lock
      - pyproject.toml
      - runway.file.spec
      - runway.folder.spec


env:
  AWS_DEFAULT_REGION: us-east-1


jobs:
  build-pyinstaller-onefile:
    name: Pyinstaller "One File" Build
    strategy:
      fail-fast: true
      matrix:
        os: [macos-10.15, ubuntu-18.04, windows-latest]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    env:
      OS_NAME: ${{ matrix.os }}
      # pydantic binary causes a recursion error
      # https://github.com/pyinstaller/pyinstaller/issues/4406
      PIP_NO_BINARY: pydantic
    steps:
      - name: Checkout Repo (complete)
        uses: actions/checkout@v2.3.2
        with:
          fetch-depth: 0
      - name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Remove broken apt repos (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
      - name: Install Dependencies (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: sudo apt-get update && sudo apt-get install sed -y
      - name: Install Dependencies (windows)
        if: matrix.os == 'windows-latest'
        run: choco install make sed
      - name: Pip Cache (macOS)
        uses: actions/cache@v1
        if: matrix.os == 'macos-10.15'
        with:
          path: ~/Library/Caches/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: startsWith( matrix.os, 'ubuntu' )
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Pip Cache (windows)
        uses: actions/cache@v1
        if: matrix.os == 'windows-latest'
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - uses: Gr1N/setup-poetry@v4
      - run: poetry install -vv
      - name: Run Build
        run: make build-pyinstaller-file
      - name: Upload Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: pyinstaller-onefile-${{ matrix.os }}
          path: artifacts
  build-pyinstaller-onefolder:
    name: Pyinstaller "One Folder" Build
    strategy:
      fail-fast: true
      matrix:
        os: [macos-10.15, ubuntu-18.04, windows-latest]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    env:
      OS_NAME: ${{ matrix.os }}
      # pydantic binary causes a recursion error
      # https://github.com/pyinstaller/pyinstaller/issues/4406
      PIP_NO_BINARY: pydantic
    steps:
      - name: Checkout Repo (complete)
        uses: actions/checkout@v2.3.2
        with:
          fetch-depth: 0
      - name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Remove broken apt repos (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
      - name: Install Dependencies (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: sudo apt-get update && sudo apt-get install sed -y
      - name: Install Dependencies (windows)
        if: matrix.os == 'windows-latest'
        run: choco install make sed
      - name: Pip Cache (macOS)
        uses: actions/cache@v1
        if: matrix.os == 'macos-10.15'
        with:
          path: ~/Library/Caches/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: startsWith( matrix.os, 'ubuntu' )
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Pip Cache (windows)
        uses: actions/cache@v1
        if: matrix.os == 'windows-latest'
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - uses: Gr1N/setup-poetry@v4
      - run: poetry install -vv
      - name: Run Build
        run: make build-pyinstaller-folder
      - name: Upload Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: pyinstaller-onefolder-${{ matrix.os }}
          path: artifacts
  build-npm:
    name: Build npm ðŸ“¦
    if: github.ref == 'refs/heads/master'
    needs:
      - build-pyinstaller-onefolder
    env:
      NODE_VERSION: 12
      NPM_PACKAGE_NAME: '@onica/runway'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo (complete)
        uses: actions/checkout@v2.3.2
        with:
          fetch-depth: 0
      - id: check_distance
        name: Ensure Commit Is Not Tagged
        continue-on-error: true
        run: bash ./check_distance_from_tag.sh
        working-directory: .github/scripts/cicd
      - name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        if: steps.check_distance.outcome == 'success'
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Node ${{ env.NODE_VERSION }} on ${{ matrix.os }}
        if: steps.check_distance.outcome == 'success'
        uses: actions/setup-node@v1.4.4
        with:
          always-auth: true
          node-version: ${{ env.NODE_VERSION }}
          registry-url: https://registry.npmjs.org
          scope: '@onica'
      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Remove broken apt repos (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
      - name: Install Dependencies (ubuntu)
        if: steps.check_distance.outcome == 'success'
        run: sudo apt-get update && sudo apt-get install sed tree -y
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: startsWith( matrix.os, 'ubuntu' )
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - uses: Gr1N/setup-poetry@v4
      - run: poetry install -vv
      - name: Download Artifacts (macOS)
        if: steps.check_distance.outcome == 'success'
        uses: actions/download-artifact@v1.0.0
        with:
          name: pyinstaller-onefolder-macos-10.15
          path: artifacts
      - name: Download Artifacts (ubuntu)
        if: steps.check_distance.outcome == 'success'
        uses: actions/download-artifact@v1.0.0
        with:
          name: pyinstaller-onefolder-ubuntu-18.04
          path: artifacts
      - name: Download Artifacts (windows)
        if: steps.check_distance.outcome == 'success'
        uses: actions/download-artifact@v1.0.0
        with:
          name: pyinstaller-onefolder-windows-latest
          path: artifacts
      - name: List Artifacts
        if: steps.check_distance.outcome == 'success'
        run: tree artifacts/
      - name: npm Prep
        if: steps.check_distance.outcome == 'success'
        run: make npm-prep
      - name: npm pack
        if: steps.check_distance.outcome == 'success'
        run: |
          npm pack
          rm -rf artifacts && mkdir -p artifacts
          find . -name 'onica-runway-*.*.*.tgz' -exec mv {} artifacts/ \;
      - name: Skipped Publishing
        if: steps.check_distance.outcome == 'failure'
        run: echo "A pre-production version was not published because the current commit is tagged for release."
      - name: Upload Artifacts
        if: steps.check_distance.outcome == 'success'
        uses: actions/upload-artifact@v1.0.0
        with:
          name: npm-pack
          path: artifacts
