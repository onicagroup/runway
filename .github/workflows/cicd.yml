name: CI/CD


on:
  pull_request:  # any pull request
  push:
    branches:
      - master


defaults:
  run:
    shell: bash


env:
  AWS_DEFAULT_REGION: us-east-1
  PIPENV_NOSPIN: true
  PIPENV_VENV_IN_PROJECT: true
  PIPENV_YES: true
  RUNWAY_TEST_NAMESPACE: gh-action-${{ github.run_id }}


jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      infra-test: ${{ steps.filter.outputs.infrastructure-test }}
      infra-test-alt: ${{ steps.filter.outputs.infrastructure-test-alt }}
    steps:
      - uses: actions/checkout@v2  # not needed for pull_request
        if: |
          github.event_name == 'push'
      - uses: dorny/paths-filter@v2  # cspell:ignore dorny
        id: filter
        with:
          filters: |
            infrastructure-test:
              - 'infrastructure/blueprints/admin_user.py'
              - 'infrastructure/blueprints/cfngin_bucket.py'
              - 'infrastructure/blueprints/prevent_privilege_escalation.py'
              - 'infrastructure/blueprints/test_runner_boundary.py'
              - 'infrastructure/blueprints/test_runner_user.py'
              - 'infrastructure/test/common/**'
            infrastructure-test-alt:
              - 'infrastructure/blueprints/admin_role.py'
              - 'infrastructure/blueprints/cfngin_bucket.py'
              - 'infrastructure/blueprints/prevent_privilege_escalation.py'
              - 'infrastructure/blueprints/test_runner_boundary.py'
              - 'infrastructure/test-alt/common/**'
  deploy-test-infrastructure:
    name: Deploy Test Infrastructure
    environment: test
    concurrency: test-infrastructure
    needs: changes
    if: |
      github.repository == 'onicagroup/runway' &&
      (needs.changes.outputs.infra-test == 'true' || needs.changes.outputs.infra-test-alt == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2.3.2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: startsWith( matrix.os, 'ubuntu' )
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Install Global Python Packages
        run: |
          python -m pip install --upgrade pip setuptools
          pip install "virtualenv==16.7.9" "pipenv==2018.11.26"
      - name: Setup Python Virtual Environment
        run: pipenv sync
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - run: make deploy test
        working-directory: infrastructure
      - run: make deploy test-alt
        working-directory: infrastructure
  pre-commit:
    name: pre-commit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: startsWith( matrix.os, 'ubuntu' )
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Install Global Python Packages
        run: |
          python -m pip install --upgrade pip setuptools
          pip install "virtualenv==16.7.9" "pipenv==2018.11.26"
      - name: Setup Python Virtual Environment
        run: pipenv sync --dev
      - uses: pre-commit/action@v2.0.0
  test-functional:
    name: Functional Tests
    needs: deploy-test-infrastructure
    if: github.repository == 'onicagroup/runway'  # will fail if run from forks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2.3.2
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # testing with npm < 7
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: startsWith( matrix.os, 'ubuntu' )
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Install Global Python Packages
        run: |
          python -m pip install --upgrade pip setuptools
          pip install "virtualenv==16.7.9" "pipenv==2018.11.26"
      - name: Setup Python Virtual Environment
        run: pipenv sync --dev
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TEST_RUNNER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TEST_RUNNER_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Run Tests
        run: make test-functional
  test-python:
    name: Python Linting & Tests
    strategy:
      fail-fast: true
      matrix:
        python-version: [3.7, 3.8]
        os: [ubuntu-18.04, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      # populating AWS creds with fake values
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2.3.2
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: '15'
      - name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Remove broken apt repos (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
      - name: Install Dependencies (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: sudo apt-get update && sudo apt-get install sed -y
      - name: Install Dependencies (windows)
        if: matrix.os == 'windows-latest'
        run: choco install make sed
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: startsWith( matrix.os, 'ubuntu' )
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Pip Cache (windows)
        uses: actions/cache@v1
        if: matrix.os == 'windows-latest'
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Install Global Python Packages
        run: |
          python -m pip install --upgrade pip setuptools
          pip install "virtualenv==16.7.9" "pipenv==2018.11.26"
      - name: Install Node Dependencies
        run: make npm-install
      - name: Setup Python Virtual Environment
        run: pipenv sync --dev
      - name: Run Linters
        run: make lint
      - name: Run Integration & Unit Tests
        if: matrix.os != 'windows-latest'
        # assertions assume linux so some fail when run on windows
        run: make test
  build-pypi:
    name: Build PyPi ðŸ“¦
    if: github.ref == 'refs/heads/master'
    needs:
      - pre-commit
      - test-python
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-18.04]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo (complete)
        uses: actions/checkout@v2.3.2
        with:
          fetch-depth: 0
      - name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Remove broken apt repos (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
      - name: Install Dependencies (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: sudo apt-get update && sudo apt-get install sed -y
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: startsWith( matrix.os, 'ubuntu' )
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Install Global Python Packages
        run: |
          python -m pip install --upgrade pip setuptools
          pip install "virtualenv==16.7.9" "pipenv==2018.11.26" wheel
      - name: Setup Python Virtual Environment
        run: pipenv sync --dev
      - name: Run Build
        run: make build
      - name: Upload Distribution Artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: pypi-dist
          path: dist
  # publish-pypi:
  #   name: Publish ðŸ“¦ To PyPI
  #   if: github.ref == 'refs/heads/master'
  #   needs:
  #     - build-pypi
  #   runs-on: ubuntu-18.04
  #   steps:
  #     - name: Download Distribution Artifact
  #       uses: actions/download-artifact@v1.0.0
  #       with:
  #         name: pypi-dist
  #         path: dist
  #     - name: Publish Distribution ðŸ“¦ to Test PyPI
  #       uses: pypa/gh-action-pypi-publish@v1.1.0
  #       with:
  #         password: ${{ secrets.test_pypi_password }}
  #         repository_url: https://test.pypi.org/legacy/
