name: CI/CD


on:
  pull_request:  # any pull request
  push:
    branches:
      - master


env:
  AWS_DEFAULT_REGION: us-east-1
  PIPENV_NOSPIN: true
  PIPENV_VENV_IN_PROJECT: true
  PIPENV_YES: true


jobs:
  pre-commit:
    name: pre-commit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: matrix.os == 'ubuntu-18.04'
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Install Global Python Packages
        run: |
          python -m pip install --upgrade pip setuptools
          pip install "virtualenv==16.7.9" "pipenv==2018.11.26"
      - name: Setup Python Virtual Environment
        run: pipenv sync --dev
      - uses: pre-commit/action@v2.0.0
  test-python:
    name: Python Linting & Tests
    strategy:
      fail-fast: true
      matrix:
        python-version: [3.7, 3.8]
        os: [ubuntu-18.04, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      # populating AWS creds with fake values
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
    steps:
        # &checkout
      - name: Checkout Repo
        uses: actions/checkout@v2.3.2
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: '15'
        # &install_python
      - name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
        # &dependencies_ubuntu
      - name: Install Dependencies (ubuntu)
        if: matrix.os == 'ubuntu-18.04'
        run: sudo apt-get update && sudo apt-get install sed -y
        # &dependencies_windows
      - name: Install Dependencies (windows)
        if: matrix.os == 'windows-latest'
        run: choco install make sed
        # &cache_pip_ubuntu
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: matrix.os == 'ubuntu-18.04'
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
        # &cache_pip_windows
      - name: Pip Cache (windows)
        uses: actions/cache@v1
        if: matrix.os == 'windows-latest'
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
        # &install_pip
      - name: Install Global Python Packages
        run: |
          python -m pip install --upgrade pip setuptools
          pip install "virtualenv==16.7.9" "pipenv==2018.11.26"
      - name: Install Node Dependencies
        run: npm install --ignore-scripts
        # &pipenv_sync
      - name: Setup Python Virtual Environment
        run: pipenv sync --dev
      - name: Run Linters
        run: make lint
      - name: Run Integration & Unit Tests
        if: matrix.os != 'windows-latest'
        # assertions assume linux so some fail when run on windows
        run: make test
  build-pypi:
    name: Build PyPi ðŸ“¦
    if: github.ref == 'refs/heads/master'
    needs:
      - pre-commit
      - test-python
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-18.04]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo (complete)
        uses: actions/checkout@v2.3.2
        with:
          fetch-depth: 0
      - name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies (ubuntu)
        if: matrix.os == 'ubuntu-18.04'
        run: sudo apt-get update && sudo apt-get install sed -y
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: matrix.os == 'ubuntu-18.04'
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Install Global Python Packages
        run: |
          python -m pip install --upgrade pip setuptools
          pip install "virtualenv==16.7.9" "pipenv==2018.11.26" wheel
      - name: Setup Python Virtual Environment
        run: pipenv sync --dev
      - name: Run Build
        run: make build
      - name: Upload Distribution Artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: pypi-dist
          path: dist
  # publish-pypi:
  #   name: Publish ðŸ“¦ To PyPI
  #   if: github.ref == 'refs/heads/master'
  #   needs:
  #     - build-pypi
  #   runs-on: ubuntu-18.04
  #   steps:
  #     - name: Download Distribution Artifact
  #       uses: actions/download-artifact@v1.0.0
  #       with:
  #         name: pypi-dist
  #         path: dist
  #     - name: Publish Distribution ðŸ“¦ to Test PyPI
  #       uses: pypa/gh-action-pypi-publish@v1.1.0
  #       with:
  #         password: ${{ secrets.test_pypi_password }}
  #         repository_url: https://test.pypi.org/legacy/
