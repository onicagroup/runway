name: CI/CD

on: push

env:
  AWS_DEFAULT_REGION: us-east-1
  PIPENV_NOSPIN: true
  PIPENV_VENV_IN_PROJECT: true
  PIPENV_YES: true

# YAML anchors are not currently supported but are included here, commented out for support is added
# https://github.community/t5/GitHub-Actions/Support-for-YAML-anchors/td-p/30336

jobs:
  test-python:
    name: Python Linting & Tests
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [2.7, 3.5, 3.6, 3.7]
    runs-on: ${{ matrix.os }}
    env:
      # populating AWS creds with fake values
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
    steps:
      - # &checkout
        name: Checkout Repo
        uses: actions/checkout@v2.0.0
      - # &install_python
        name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - # &dependencies_ubuntu
        name: Install Dependencies (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install sed -y
      - # &dependencies_windows
        name: Install Dependencies (windows)
        if: matrix.os == 'windows-latest'
        run: choco install make sed
      - # &cache_pip_ubuntu
        name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          path:  ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - # &cache_pip_windows
        name: Pip Cache (windows)
        uses: actions/cache@v1
        if: matrix.os == 'windows-latest'
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - # &install_pip
        name: Install Global Python Packages
        run: |
          python -m pip install --upgrade pip setuptools
          pip install "virtualenv==16.7.9" "pipenv==2018.11.26"
      - # &cache_pipenv
        name: Pipenv Cache
        uses: actions/cache@v1
        with:
          path: ./.venv
          key: ${{ github.ref	}}-${{ matrix.os }}-venv-${{ matrix.python-version }}
          restore-keys: |
            ${{ github.ref	}}-${{ matrix.os }}-venv-${{ matrix.python-version }}
      - # &pipenv_sync_27
        name: Setup Python Virtual Environment (2.7)
        if: matrix.python-version == '2.7'  && matrix.os != 'windows-latest'
        run: |
          rm -rf Pipfile.lock
          pipenv install "pylint<2.0" --dev
          pipenv sync --dev
      - # &pipenv_sync_27_windows
        name: Setup Python Virtual Environment (2.7) (windows)
        if: matrix.python-version == '2.7' && matrix.os == 'windows-latest'
        run: |
          Remove-Item -Path $Env:GITHUB_WORKSPACE\Pipfile.lock -Force
          pipenv install "pylint<2.0" --dev
          pipenv sync --dev
      - # &pipenv_sync
        name: Setup Python Virtual Environment (3.x)
        if: matrix.python-version != '2.7'
        run: pipenv sync --dev
      - # &install_pipenv_legacy
        name: Install Legacy Python Dependencies
        if: matrix.python-version == '3.5'
        # install missing dependency for older versions of python
        # the version of pytest we are using only requires install for <3.4
        run: pipenv install "pathlib2>=2.2.0" --dev
      - name: Run Linters
        run: make lint
      - name: Run Unit Tests
        if: matrix.os != 'windows-latest'
        # assertions assume linux so some fail when run on windows
        run: make test

  build-pyinstaller-onefile:
    name: Pyinstaller "One File" Build
    strategy:
      fail-fast: true
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    env:
      OS_NAME: ${{ matrix.os }}
    steps:
      # - *checkout
      - name: Checkout Repo
        uses: actions/checkout@v2.0.0
      # - *install_python
      - name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      # - *dependencies_ubuntu
      - name: Install Dependencies (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install sed -y
      # - *dependencies_windows
      - name: Install Dependencies (windows)
        if: matrix.os == 'windows-latest'
        run: choco install make sed
      # - &cache_pip_mac
      - name: Pip Cache (macOS)
        uses: actions/cache@v1
        if: matrix.os == 'macos-latest'
        with:
          path: ~/Library/Caches/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      # - *cache_pip_ubuntu
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          path:  ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      # - *cache_pip_windows
      - name: Pip Cache (windows)
        uses: actions/cache@v1
        if: matrix.os == 'windows-latest'
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      # - *install_pip
      - name: Install Global Python Packages
        run: |
          python -m pip install --upgrade pip setuptools
          pip install "virtualenv==16.7.9" "pipenv==2018.11.26"
      # - *cache_pipenv
      - name: Pipenv Cache
        uses: actions/cache@v1
        with:
          path: ./.venv
          key: ${{ github.ref	}}-${{ matrix.os }}-venv-${{ matrix.python-version }}
          restore-keys: |
            ${{ github.ref	}}-${{ matrix.os }}-venv-${{ matrix.python-version }}
      # - *pipenv_sync
      - name: Setup Python Virtual Environment (3.x)
        if: matrix.python-version != '2.7'
        run: pipenv sync --dev
      - name: Run Build
        run: make build_pyinstaller_file
      - name: Upload Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: pyinstaller-onefile-${{ matrix.os }}
          path: artifacts

  build-pyinstaller-onefolder:
    name: Pyinstaller "One Folder" Build
    strategy:
      fail-fast: true
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    env:
      OS_NAME: ${{ matrix.os }}
    steps:
      # - *checkout
      - name: Checkout Repo
        uses: actions/checkout@v2.0.0
      # - *install_python
      - name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      # - *dependencies_ubuntu
      - name: Install Dependencies (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install sed -y
      # - *dependencies_windows
      - name: Install Dependencies (windows)
        if: matrix.os == 'windows-latest'
        run: choco install make sed
      # - *cache_pip_mac
      - name: Pip Cache (macOS)
        uses: actions/cache@v1
        if: matrix.os == 'macos-latest'
        with:
          path: ~/Library/Caches/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      # - *cache_pip_ubuntu
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          path:  ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      # - *cache_pip_windows
      - name: Pip Cache (windows)
        uses: actions/cache@v1
        if: matrix.os == 'windows-latest'
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      # - *install_pip
      - name: Install Global Python Packages
        run: |
          python -m pip install --upgrade pip setuptools
          pip install "virtualenv==16.7.9" "pipenv==2018.11.26"
      # - *cache_pipenv
      - name: Pipenv Cache
        uses: actions/cache@v1
        with:
          path: ./.venv
          key: ${{ github.ref	}}-${{ matrix.os }}-venv-${{ matrix.python-version }}
          restore-keys: |
            ${{ github.ref	}}-${{ matrix.os }}-venv-${{ matrix.python-version }}
      # - *pipenv_sync
      - name: Setup Python Virtual Environment (3.x)
        if: matrix.python-version != '2.7'
        run: pipenv sync --dev
      - name: Run Build
        run: make build_pyinstaller_folder
      - name: Upload Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: pyinstaller-onefolder-${{ matrix.os }}
          path: artifacts

  build-pypi:
    name: Build PyPi ðŸ“¦
    if: github.ref == 'refs/heads/master' || startsWith(github.event.ref, 'refs/tags')
    needs:
      - test-python
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    steps:
      # - *checkout
      - name: Checkout Repo
        uses: actions/checkout@v2.0.0
      # - *install_python
      - name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      # - *dependencies_ubuntu
      - name: Install Dependencies (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install sed -y
      # - *cache_pip_ubuntu
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          path:  ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Install Global Python Packages
        run: |
          python -m pip install --upgrade pip setuptools
          pip install "virtualenv==16.7.9" "pipenv==2018.11.26" wheel
      # - *cache_pipenv
      - name: Pipenv Cache
        uses: actions/cache@v1
        with:
          path: ./.venv
          key: ${{ github.ref	}}-${{ matrix.os }}-venv-${{ matrix.python-version }}
          restore-keys: |
            ${{ github.ref	}}-${{ matrix.os }}-venv-${{ matrix.python-version }}
      # - *pipenv_sync
      - name: Setup Python Virtual Environment (3.x)
        run: pipenv sync --dev
      - name: Run Build
        run: make build
      - name: Upload Distribution Artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: pypi-dist
          path: dist

  publish-pypi:
    name: Publish ðŸ“¦ To PyPI
    if: github.ref == 'refs/heads/master' || startsWith(github.event.ref, 'refs/tags')
    needs:
      - build-pypi
    runs-on: ubuntu-latest
    steps:
      - name: Download Distribution Artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: pypi-dist
      - name: Publish Distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@v1.1.0
        with:
          password: ${{ secrets.test_pypi_password }}
          repository_url: https://test.pypi.org/legacy/
      - name: Publish Distribution ðŸ“¦ to PyPI
        if: success() && startsWith(github.event.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@v1.1.0
        with:
          password: ${{ secrets.pypi_password }}
