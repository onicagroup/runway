name: Publish Release


on:
  release:
    types:
      - published

env:
  AWS_DEFAULT_REGION: us-east-1


jobs:
  build-pyinstaller-onefile:
    name: Pyinstaller "One File" Build
    strategy:
      fail-fast: true
      matrix:
        os: [macos-10.15, ubuntu-18.04, windows-latest]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    env:
      OS_NAME: ${{ matrix.os }}
      # pydantic binary causes a recursion error
      # https://github.com/pyinstaller/pyinstaller/issues/4406
      PIP_NO_BINARY: pydantic
    steps:
      - name: Checkout Repo (complete)
        uses: actions/checkout@v2.3.2
        with:
          fetch-depth: 0
      - name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Remove broken apt repos (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
      - name: Install Dependencies (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: sudo apt-get update && sudo apt-get install sed -y
      - name: Install Dependencies (windows)
        if: matrix.os == 'windows-latest'
        run: choco install make sed
      - name: Pip Cache (macOS)
        uses: actions/cache@v1
        if: matrix.os == 'macos-10.15'
        with:
          path: ~/Library/Caches/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: startsWith( matrix.os, 'ubuntu' )
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Pip Cache (windows)
        uses: actions/cache@v1
        if: matrix.os == 'windows-latest'
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - uses: Gr1N/setup-poetry@v4
      - run: poetry install -vv
      - name: Run Build
        run: make build-pyinstaller-file
      - name: Upload Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: pyinstaller-onefile-${{ matrix.os }}
          path: artifacts
  build-pyinstaller-onefolder:
    name: Pyinstaller "One Folder" Build
    strategy:
      fail-fast: true
      matrix:
        os: [macos-10.15, ubuntu-18.04, windows-latest]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    env:
      OS_NAME: ${{ matrix.os }}
      # pydantic binary causes a recursion error
      # https://github.com/pyinstaller/pyinstaller/issues/4406
      PIP_NO_BINARY: pydantic
    steps:
      - name: Checkout Repo (complete)
        uses: actions/checkout@v2.3.2
        with:
          fetch-depth: 0
      - name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Remove broken apt repos (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
      - name: Install Dependencies (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: sudo apt-get update && sudo apt-get install sed -y
      - name: Install Dependencies (windows)
        if: matrix.os == 'windows-latest'
        run: choco install make sed
      - name: Pip Cache (macOS)
        uses: actions/cache@v1
        if: matrix.os == 'macos-10.15'
        with:
          path: ~/Library/Caches/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: startsWith( matrix.os, 'ubuntu' )
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - name: Pip Cache (windows)
        uses: actions/cache@v1
        if: matrix.os == 'windows-latest'
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - uses: Gr1N/setup-poetry@v4
      - run: poetry install -vv
      - name: Run Build
        run: make build-pyinstaller-folder
      - name: Upload Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: pyinstaller-onefolder-${{ matrix.os }}
          path: artifacts
  build-npm:
    name: Build npm ðŸ“¦
    needs:
      - build-pyinstaller-onefolder
    env:
      NODE_VERSION: 12
      NPM_PACKAGE_NAME: '@onica/runway'
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-18.04]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo (complete)
        uses: actions/checkout@v2.3.2
        with:
          fetch-depth: 0
      - name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Node ${{ env.NODE_VERSION }} on ${{ matrix.os }}
        uses: actions/setup-node@v1.4.4
        with:
          always-auth: true
          node-version: ${{ env.NODE_VERSION }}
          registry-url: https://registry.npmjs.org
          scope: '@onica'
      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Remove broken apt repos (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
      - name: Install Dependencies (ubuntu)
        run: sudo apt-get update && sudo apt-get install sed tree -y
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: startsWith( matrix.os, 'ubuntu' )
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - uses: Gr1N/setup-poetry@v4
      - run: poetry install -vv
      - name: Download Artifacts (macOS)
        uses: actions/download-artifact@v1.0.0
        with:
          name: pyinstaller-onefolder-macos-10.15
          path: artifacts
      - name: Download Artifacts (ubuntu)
        uses: actions/download-artifact@v1.0.0
        with:
          name: pyinstaller-onefolder-ubuntu-18.04
          path: artifacts
      - name: Download Artifacts (windows)
        uses: actions/download-artifact@v1.0.0
        with:
          name: pyinstaller-onefolder-windows-latest
          path: artifacts
      - name: List Artifacts
        run: tree artifacts/
      - name: npm Prep
        run: make npm-prep
      - name: npm pack
        run: |
          npm pack
          rm -rf artifacts && mkdir -p artifacts
          find . -name 'onica-runway-*.*.*.tgz' -exec mv {} artifacts/ \;
      - name: Upload Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: npm-pack
          path: artifacts
  publish-npm:
    name: Publish ðŸ“¦ To npm
    needs:
      - build-npm
    env:
      CI: true
      NODE_VERSION: 12
      NPM_PACKAGE_NAME: '@onica/runway'
      NODE_AUTH_TOKEN: ${{ secrets.npm_api_token }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-18.04]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Node ${{ env.NODE_VERSION }} on ${{ matrix.os }}
        uses: actions/setup-node@v1.4.4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: https://registry.npmjs.org/
      - name: Download Artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: npm-pack
          path: artifacts
      - name: Publish Distribution ðŸ“¦ to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_api_token }}
        run: |
          find ./artifacts -name 'onica-runway-*.*.*.tgz' -exec npm publish --access public {} +
  build-pypi:
    name: Build PyPi ðŸ“¦
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-18.04]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo (complete)
        uses: actions/checkout@v2.3.2
        with:
          fetch-depth: 0
      - name: Install Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Remove broken apt repos (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
      - name: Install Dependencies (ubuntu)
        if: startsWith( matrix.os, 'ubuntu' )
        run: sudo apt-get update && sudo apt-get install sed -y
      - name: Pip Cache (ubuntu)
        uses: actions/cache@v1
        if: startsWith( matrix.os, 'ubuntu' )
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}
      - uses: Gr1N/setup-poetry@v4
      - run: poetry install -vv
      - name: Run Build
        run: make build
      - name: Upload Distribution Artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: pypi-dist
          path: dist
  publish-pypi:
    name: Publish ðŸ“¦ To PyPI
    needs:
      - build-pypi
    runs-on: ubuntu-18.04
    steps:
      - name: Download Distribution Artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: pypi-dist
          path: dist
      - name: Publish Distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@v1.1.0
        with:
          password: ${{ secrets.pypi_password }}
  publish-s3:
    name: Publish ðŸ“¦ To S3
    needs:
      - build-pyinstaller-onefile
    env:
      AWS_DEFAULT_REGION: us-west-2
      AWS_S3_BUCKET: common-runway-assets-bucket83908e77-u2xp1bj1tuhp
      AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_key }}
    runs-on: ubuntu-18.04
    steps:
      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Download Artifacts (macOS)
        uses: actions/download-artifact@v1.0.0
        with:
          name: pyinstaller-onefile-macos-10.15
          path: artifacts
      - name: Download Artifacts (ubuntu)
        uses: actions/download-artifact@v1.0.0
        with:
          name: pyinstaller-onefile-ubuntu-18.04
          path: artifacts
      - name: Download Artifacts (windows)
        uses: actions/download-artifact@v1.0.0
        with:
          name: pyinstaller-onefile-windows-latest
          path: artifacts
      - name: Install AWS CLI & Upload ðŸ“¦
        run: |
          pip install "awscli~=1.18.19"
          aws s3 cp artifacts s3://$AWS_S3_BUCKET/runway/ --recursive --acl public-read
  update-urlshortener:
    name: Update URL Shortener
    needs:
      - publish-s3
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_key }}
      BUCKET_NAME: common-runway-assets-bucket83908e77-u2xp1bj1tuhp
      BUCKET_REGION: us-west-2
      TABLE: onica-urlshortener-prod
      TABLE_REGION: us-east-1
      VERSION: ${{ github.ref }}
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2.3.2
      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install Dependencies & Run Script
        working-directory: .github/scripts/urlshortener
        run: |
          pip install wheel
          pip install -r requirements.txt
          python update_urls.py \
            --bucket-name $BUCKET_NAME \
            --bucket-region $BUCKET_REGION \
            --table $TABLE \
            --table-region $TABLE_REGION \
            --version $VERSION \
            --latest
