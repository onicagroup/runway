[tool.poetry]
name = "runway"
version = "2.0.0-dev"  # do not change
authors = [
  "Onica Group LLC <opensource@onica.com>",
]
classifiers = [
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.9",
  "Topic :: Utilities",
]
description = "Simplify infrastructure/app testing/deployment"
documentation = "https://docs.onica.com/projects/runway"
homepage = "https://github.com/onicagroup/runway"
keywords = ["cli"]
license = "Apache-2.0"
maintainers = [
  "Kyle Finley <kyle@finley.sh>",
  "Sam Fakhreddine <sam.fakhreddine@rackspace.com>",
]
packages = [
  {include = "runway"},
]
readme = "README.md"
repository = "https://github.com/onicagroup/runway"

[tool.poetry.dependencies]
python = ">=3.9, <3.13"
awacs = "*"
"backports.cached_property" = {python = "<3.8", version = "*"}
boto3 = "^1.16"
cfn-lint = "*"
cfn_flip = "^1.2"  # only used in runway._cli.commands._gen_sample.utils
click = "^8.0"
coloredlogs = "*, !=15.0.1"
docker = ">=3.0.0"  # used in runway.cfngin.hooks
formic2 = "*"  # only used in runway.cfngin.hooks.aws_lambda
gitpython = "*"
igittigitt = ">=2.0.5"
importlib-metadata = {python = "<3.8", version = "*"}
jinja2 = ">=2.7"  # used in runway.cfngin.blueprints.raw
moto = "3.0.5"
packaging = "*"  # component of setuptools needed for version compare
pipenv = "2022.1.8"
pyOpenSSL = "*"  # For embedded hook & associated script usage
pydantic = "^1.4"
pyhcl = "^0.4"  # does not support HCL2, possibly move to extras_require in the future
pyinstaller = "^6.2.0"
python-hcl2 = ">=3.0.0"
pyyaml = ">5.4"
requests = "*"
send2trash = "*"
testfixtures = "^7.0.3"
tomli = ">=1.2.2"
troposphere = ">=2.4, <5"
typing_extensions = "*"  # only really needed for < 3.8 but can still be used in >= 3.8
urllib3 = "*"  # allow us to follow botocore's hard pinning without needing to update our own
wheel = "^0.42.0"
yamllint = "*"

[tool.poetry.group.dev.dependencies]
coverage = {extras = ["toml"], version = ">=6.3"}
doc8 = ">=0.10"  # for linting with vscode rst extension
dunamai = "^1.5"
mock = ">=4.0"
moto = {extras = ["ec2", "ecs", "iam", "s3", "ssm"], version = ">=3.0"}
pipenv = "^2022.1.8"  # only used in tests
pre-commit = "^3.7.1"
pytest = ">=7.0"
pytest-cov = ">=3.0"  # pytest plugin
pytest-mock = ">=3.7"  # pytest plugin
pytest-order = ">=1"  # pytest plugin
pytest-subprocess = ">=1.4"  # pytest plugin
pytest-sugar = ">=0.9"  # pytest plugin
pytest-xdist = ">=2.5"  # pytest plugin
semver = "^2.13"  # only used in .github/scripts/urlshortener
testfixtures = "^7.0.3"  # TODO remove use of this dependency - was inherited
tomli-w = ">=1.0"

[tool.poetry.group.docs.dependencies]
dunamai = "^1.5"
jsx-lexer = "^1.0"
sphinx = "^4.3"
sphinx-github-changelog = "^1.1"
sphinx-rtd-theme = "^1.0"
sphinx-tabs = "^3.2"
sphinxcontrib-apidoc = "^0.3"
sphinxcontrib-programoutput = "^0.17"

[tool.poetry.group.lint.dependencies]
black = "^24.4.2"

[tool.poetry.group.types.dependencies]
mypy-boto3 = "^1.16"  # importable boto3 type annotations

[tool.poetry.group.types.dependencies.boto3-stubs]
extras = [
  "acm",
  "awslambda",
  "cloudformation",
  "cloudfront",
  "cognito-idp",
  "dynamodb",
  "ec2",
  "ecr",
  "ecs",
  "iam",
  "kms",
  "lambda",
  "route53",
  "s3",
  "ssm",
  "sts",
]
version = "^1.16"

[tool.poetry.scripts]
runway = "runway._cli.main:cli"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/onicagroup/runway/issues"

[tool.black]
force-exclude = '''
/(
    \.eggs
  | \.git
  | \.demo
  | \.hg
  | \.mypy_cache
  | \.runway
  | \.tox
  | \.venv
  | _build
  | build
  | dist
  | npm
  | runway/aws_sso_botocore
)/
'''
include = '\.pyi?$'
line-length = 100
target-version = ["py310", "py311", "py312", "py39"]

[tool.coverage.report]
exclude_lines = [
  "@overload",
  "cov: ignore",  # standard exclude comment
  "from pathlib import Path",
  "if TYPE_CHECKING:",  # excluded blocks
  "if __name__ == .__main__.:",
  "raise AssertionError",  # defensive exceptions
  "raise NotImplementedError",
]
fail_under = 85
precision = 2
show_missing = true

[tool.coverage.run]
concurrency = [
  "multiprocessing",
  "thread",
]
omit = [
  "*/compat.py",
  "*/runway/aws_sso_botocore/*",  # TODO remove native support is added to botocore
  "*/runway/cfngin/hooks/staticsite/auth_at_edge/templates/*",
  "*/type_defs.py",
]

[tool.pyright]
exclude = [
  "**/.demo",
  "**/.eggs",
  "**/.git",
  "**/.runway",
  "**/.venv",
  "**/__pycache__",
  "**/docs",
  "**/node_modules",
  "**/quickstarts",
  "**/runway/aws_sso_botocore",
  "**/runway/cfngin/hooks/staticsite/auth_at_edge/templates",
  "**/runway/templates/cdk-py",
  "**/tests/functional/cfngin/test_aws_lambda_hook/lambda_src",
  "**/tests/unit",
  "**/typings",
]
extraPaths = [
  "./.github/scripts/urlshortener",
]
pythonPlatform = "All"
pythonVersion = "3.9"
reportDuplicateImport = "none"
reportImportCycles = "none"
reportIncompatibleMethodOverride = "warning"
reportMissingTypeStubs = "none"
reportPrivateUsage = "none"
reportUnknownMemberType = "none"
reportUnnecessaryIsInstance = "warning"
reportUnusedImport = "none"
reportUnusedVariable = "none"
reportWildcardImportFromLibrary = "none"
strictParameterNoneValue = false
typeCheckingMode = "strict"
useLibraryCodeForTypes = true
venv = ".venv"

[tool.pytest.ini_options]
addopts = [
  "--cov-config=pyproject.toml",
  "--no-cov-on-fail",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::pytest_mock.PytestMockWarning",
]
markers = [
  "wip: isolate tests currently being worked on.",
]
minversion = 6.0
python_classes = ["Test*"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
testpaths = ["tests"]

[tool.tomlsort]
all = true
in_place = true
sort_first = ["tool", "tool.poetry"]
spaces_before_inline_comment = 2
trailing_comma_inline_array = true
overrides."tool.poetry".first = ["name", "version"]
overrides."tool.poetry.dependencies".first = ["python"]

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry_core>=1.0.7"]
